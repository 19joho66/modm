#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2009, Martin Rosekeit
# Copyright (c) 2009-2013, Fabian Greif
# Copyright (c) 2012, Sascha Schade
# Copyright (c) 2013-2014, Kevin Laeufer
# Copyright (c) 2015-2016, Niklas Hauser
# Copyright (c) 2016, Daniel Krebs
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

Import('env')
Import('sources')
Import('defines')

# Paths which should be searched for compilable files
sourcePath = []

# Local include paths which are needed to build the files in the external libraries
buildIncludes = []

# These paths are used to build the local files but are also added to the
# global environment
globalIncludes = []

if env['ARCHITECTURE'].startswith('cortex-m'):
	globalIncludes += ['cmsis/Include', 'tlsf']
	sourcePath += ['tlsf']

# -----------------------------------------------------------------------------
# Add the STM32 device header files
if env['MODM_DEVICE'].startswith('stm32f0'):
	globalIncludes += ['st/stm32f0xx/Include']

if env['MODM_DEVICE'].startswith('stm32f1'):
	globalIncludes += ['st/stm32f1xx/Include']

# if env['MODM_DEVICE'].startswith('stm32f2'):
# 	globalIncludes += [
# 		'st/stm32f2xx/Include']

if env['MODM_DEVICE'].startswith('stm32f3'):
	globalIncludes += ['st/stm32f3xx/Include']

if env['MODM_DEVICE'].startswith('stm32f4'):
	globalIncludes += ['st/stm32f4xx/Include']

if env['MODM_DEVICE'].startswith('stm32f7'):
	globalIncludes += ['st/stm32f7xx/Include']

# -----------------------------------------------------------------------------
# Add the LPC device header files
if env['MODM_DEVICE'].startswith('lpc11'):
	globalIncludes += ['nxp/lpc11xx/Include']

# -----------------------------------------------------------------------------
if 'stm32f' in env['MODM_DEVICE'] and not env['MODM_DEVICE'].startswith('stm32f0'):
	sourcePath += ['freertos']		# FreeRTOS for STM32
	sourcePath += ['fatfs']			# FatFS


includes = buildIncludes + globalIncludes
for path in includes:
	env.AppendUnique(CPPPATH = os.path.join(env['MODM_ROOTPATH'], 'ext', path))

for path in sourcePath:
	scan = env.FindFiles(path = path)

	sources.append(scan.sources)
	defines.update(scan.defines)

result = (sources, defines, globalIncludes)
Return('result')
