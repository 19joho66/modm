#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016, Fabian Greif
# Copyright (c) 2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

from collections import defaultdict

def init(module):
    module.name = ":cmsis:dsp"
    module.description = FileReader("dsp.md")

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("core:cortex-m*"):
        return False

    if not device.has_driver("core:cortex-m0*"):
        module.add_option(
            BooleanOption(
                name="unaligned_data",
                description=descr_unaligned_data,
                default=False))
    module.add_option(
        BooleanOption(
            name="check_matrix_sizes",
            description=descr_matrix_sizes,
            default=False))
    module.add_option(
        BooleanOption(
            name="round_float_inputs",
            description=descr_round_floats,
            default=True))

    return True

def build(env):
    metadata = defaultdict(list)
    metadata[":build:cflags"].append("-fno-strict-aliasing")

    core = env[":target"].get_driver("core")["type"]
    if "f" in core:
        metadata[":build:cppdefines"].append("__FPU_PRESENT=1")

    core = core.replace("cortex-m", "CM").replace("+", "PLUS").replace("f", "").replace("d", "")
    env.collect(":build:cppdefines", "ARM_MATH_{}".format(core))

    if env["check_matrix_sizes"]:
        metadata[":build:cppdefines"].append("ARM_MATH_MATRIX_CHECK")
    else:
        metadata[":build:cppdefines.debug"].append("ARM_MATH_MATRIX_CHECK")

    if env["round_float_inputs"]:
        metadata[":build:cppdefines"].append("ARM_MATH_ROUNDING")

    if not env.get("unaligned_data", False):
        metadata[":build:cppdefines"].append("UNALIGNED_SUPPORT_DISABLE")

    env.collect(":build:path.include", "modm/ext/cmsis/dsp")

    env.outbasepath = "modm/ext/cmsis/dsp"
    env.copy("cmsis/CMSIS/DSP/Include", ".")
    operations = env.copy("cmsis/CMSIS/DSP/Source", ".")

    # For all sources add these compile flags
    for key, values in metadata.items():
        env.collect(key, *values, operations=operations)


# ============================ Option Descriptions ============================
descr_unaligned_data = """# Allow unaligned data storage

If the core supports it, this options enables storing data in unaligned memory.
This may reduce data size, but cost some speed.
"""

descr_matrix_sizes = """# Check input/output matrix size

Check the input and output sizes of matrices and return
`ARM_MATH_SIZE_MISMATCH` on failure.
"""

descr_round_floats = """# Round float inputs

Rounds float inputs properly during all conversions.
"""
