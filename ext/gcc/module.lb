#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2017, Niklas Hauser
# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2018, Christopher Durand
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------


def init(module):
    module.name = ":stdc++"
    module.description = """\
# C++ Standard Environment

Refines the C++ language to make it easier to use on embedded targets.
The compiler options are appended with:

- `-fno-exceptions`: no C++ exceptions.
- `-fno-rtti`: no C++ run-time type information.

## AVR

A partial port of GCC 8 libstdc++ is provided:
See https://github.com/modm-io/avr-libstdcpp.

## ARM Cortex-M

Additional compiler options:

- `-fno-threadsafe-statics`: No thread-safe static initialization provided.
- `--specs=nano.specs`: use Newlib Nano.
- `--specs=nosys.specs`: No additional C library features are implemented.
"""


def prepare(module, options):
    is_avr = options[":target"].identifier.platform == "avr"
    is_cortex_m = options[":target"].has_driver("core:cortex-m*")
    if not (is_avr or is_cortex_m):
        return False

    if is_avr:
        module.add_option(
            BooleanOption(
                name="use_modm_assert", default=True,
                description="Assert on exception in stdlib. Set to False to save flash."))

    module.depends(":architecture:assert",
                   ":architecture:memory")

    return True


def build(env):
    is_avr = env[":target"].identifier.platform == "avr"
    is_cortex_m = env[":target"].has_driver("core:cortex-m*")
    env.substitutions = {"target": env[":target"].identifier}
    env.outbasepath = "modm/ext/gcc"
    env.template("cxxabi.cpp.in")

    if is_avr:
        env.collect(":build:path.include", "modm/ext/gcc/libstdc++/include")
        env.copy("libstdc++", ignore=env.ignore_files("*.lb", "*.md", "*.in", "examples"))
        env.template("assert.cpp.in", "assert.cpp")

        env.copy("newdelete_avr.cpp", "newdelete.cpp")

    elif is_cortex_m:
        env.copy("libcabi_cortex.cpp", "libcabi.cpp")
        env.copy("newdelete_cortex.cpp", "newdelete.cpp")

    # Compilation flags
    env.collect(":build:cxxflags", "-fuse-cxa-atexit", "-fno-threadsafe-statics",
                                   "-fno-exceptions", "-fno-unwind-tables", "-fno-rtti")

    if is_cortex_m:
        env.collect(":build:linkflags", "--specs=nosys.specs", "--specs=nano.specs")
