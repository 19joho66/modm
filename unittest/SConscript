#!/usr/bin/env python
#
# $Id$

import os
import re

Import('env')
Import('sources')
Import('header')
Import('basedir')
Import('library')

env = env.Clone()
env.Append(CPPPATH = '../../src')

# find all header files named '*_test.hpp'
headerlist = [file.name for file in header]
test = re.compile("test\.hpp$", re.IGNORECASE)
headers = filter(test.search, headerlist)

print headers

objects = []
for file in sources:
	print os.path.abspath(file.name)
	
	defines = env.get('CPPDEFINES', {})
	defines.update(file.defines)
	defines['BASENAME'] = file.basename
	
	object = env.Object(file.name, CPPDEFINES=defines)
	objects.append(object)

program = env.Program('unittest', objects,
						LIBS=['robot'] + env['LIBS'],
						LIBPATH=env['LIBPATH'] + ['../../build/lib'])

if env['ARCHITECTURE'] == 'pc':
	if int(ARGUMENTS.get('run', 1)):
		env.Command('thisfileshouldnotexist', program, './build/unittest/unittest') 
else:
	env.Hex(program)
	env.Listing(program)
