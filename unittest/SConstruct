#!/usr/bin/env python
# 
# Copyright (c) 2009, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Roboterclub Aachen e.V. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# $Id$

rootpath = '..'

pre = Environment(tools = ['xpcc'], toolpath = [rootpath + '/misc/python/scons'])
env = pre.GenerateEnvironment(config = 'project.cfg', 
							  rootpath = rootpath)

files = env.FindFiles(path = '.')

objects = []
for file in files.sources:
	object = env.Object(target = env.Buildpath(file, strip_extension=True),
						source = file)
	objects.append(object)

config = env['XPCC_CONFIG']

# create a file which later runs all the tests
template = 'runner_%s.cpp.in' % config['build.architecture']
runner = env.UnittestRunner(target = env.Buildpath('runner.cpp'),
							source = [template] + files.header)
objects.append(env.Object(runner))

# build the program
program = env.Program(target = env.Buildpath(config['general.name']),
					  source = objects)

# build the xpcc library
library = env.XpccLibrary()

env.Alias('lib', library)
env.Alias('build', program)
env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))

if env.RequireArchitecture('pc'):
	env.Alias('run', env.Run(program))
	env.Alias('all', ['build'])
else:
	env.Alias('all', ['build', 'size'])

env.Default('all')
