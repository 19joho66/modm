#!/usr/bin/env python
# 
# Copyright (c) 2009, Roboterclub Aachen e.V.
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Roboterclub Aachen e.V. nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# $Id$

import os
import ConfigParser

pre = Environment(tools = ['xpcc'], toolpath = ['../misc/python/scons'])
builder = pre.EnviromentBuilder('project.cfg')

rootpath = '../'
buildpath = os.path.join(rootpath, 'build/%s' % builder.get_name())
libpath = os.path.join(rootpath, 'src')

env = builder.get_build_environment()
env.Append(CPPPATH = [libpath, buildpath])
env.Append(LIBS = ['robot'])
env.Append(LIBPATH = [os.path.join(rootpath, 'build/library/%s' % builder.get_name())])

# -----------------------------------------------------------------------------
library = env.Command(os.path.join(rootpath, 'build/library/%s/librobot.a' % builder.get_name()), [], "@scons -C ../src config=../unittest/project.cfg")
env.Alias('lib', library)

# -----------------------------------------------------------------------------
env.GenerateConfig(target = os.path.join(buildpath, 'defines.h'),
					source = None,
					DEFINES = builder.get_defines())

# -----------------------------------------------------------------------------
scanner = builder.get_file_scanner()
scanner.scan('.')

objects = []
for file in scanner.get_source_files():
	# get filename without extensition
	outfile = os.path.splitext(os.path.join(buildpath, file))[0]
	
	object = env.Object(source = file,
						target = outfile)
	objects.append(object)

# create the file which runs all the tests
runner = env.UnittestRunner(source = ['main_pc.cpp.in'] + scanner.get_header_files(),
							target = os.path.join(buildpath, 'runner.cpp'))
objects.append(env.Object(runner))

program = env.Program(target = os.path.join(buildpath, builder.get_name()), source = objects)

# -----------------------------------------------------------------------------
# add additional command-line targets

env.Alias('run', env.Command('thisfileshouldnotexist', program, '@../build/unittest/unittest'))

env.Alias('build', program)

env.Default('build')
