#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

def init(module):
    module.name = "build"


def prepare(module, options):
    _, default_project_name = os.path.split(os.getcwd())
    default_project_name = default_project_name.replace(".", "_").replace(" ", "_")
    platform = options[":target"].identifier["platform"]

    module.add_option(
        StringOption(name="project.name", default=default_project_name,
                     description="Project name for executable"))
    module.add_option(
        StringOption(name="build.path", default="build/"+default_project_name,
                     description="Path to the build folder"))

    if platform in ["avr"]:
        # we need the clock:f_cpu option!
        module.depends(":platform:clock")
        module.add_option(
            StringOption(name="avrdude.programmer", default="avrispmkII",
                         description="AvrDude programmer"))
        module.add_option(
            StringOption(name="avrdude.port", default="usb",
                         description="AvrDude programmer port"))
        module.add_option(
            NumericOption(name="avrdude.baudrate", default=-1,
                          description="AvrDude programmer baudrate"))
        module.add_option(
            StringOption(name="avrdude.options", default="",
                         description="AvrDude programmer options"))

    if options[":target"].has_driver("core:cortex-m*"):
        module.add_option(
            StringOption(name="openocd.cfg", default="",
                         description="Path to a custom OpenOCD configuration file"))

    return True


def build(env):
    env.append_metadata_unique("include_path", "src")

    # Append custom openocd config file to metadata
    openocd_cfg = env.get_option(":build:openocd.cfg", "")
    if len(openocd_cfg):
        env.append_metadata_unique("openocd.configfile", openocd_cfg)

    # Append common search paths to metadata
    env.append_metadata_unique("openocd.search", "modm/openocd")


def post_build(env, buildlog):
    target = env[":target"]
    env.substitutions = {
        "metadata": buildlog.metadata,
    }
    env.outbasepath = "modm"

    if len(buildlog.metadata.get("modm.gitignore", [])):
        env.template("gitignore.in", ".gitignore")

    if env[":target"].has_driver("core:cortex-m*"):
        env.template("openocd.cfg.in")
        env.template("gdbinit.in")
