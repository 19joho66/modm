# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

import os
from os.path import join, abspath

# User Configurable Options
project_name = "{{ options[":build:project.name"] }}"
build_path = "{{ options[":build:build.path"] }}"
modm_path = "modm"
profile = ARGUMENTS.get("profile", "release")

# SCons environment with all tools
env = Environment(ENV=os.environ)
env["BUILDPATH"] = join(abspath(build_path), profile)
env["CONFIG_PROJECT_NAME"] = project_name
%% if family == "darwin"
# Using homebrew gcc-8 on macOS
env["COMPILERSUFFIX"] = "-8"
%% endif

# Building all libraries
env.SConscript(dirs=[modm_path], exports="env")

%% if options[":::info.git"] != "Disabled"
env.InfoGit({{ "True" if "Status" in options[":::info.git"] else "False" }})
%% endif
%% if options[":::info.build"]
env.InfoBuild()
%% endif

%% if is_unittest
# Building unit tests
headers = env.FindHeaderFiles(join(modm_path, "test"))
sources = env.UnittestRunner(target="main.cpp", source=headers, template="modm/test/runner.cpp.in")
%% else
env.Append(CPPPATH=".")
ignored = ["modm", "cmake-build-*", "build"]
sources = []
%% endif

%% if has_image_source
# Generating image sources
env.Append(CPPPATH="{{ image_source }}")
ignored.append("{{ image_source }}")
for image in env.FindFiles("{{ image_source }}", ".pbm"):
    source, _ = env.Bitmap(str(image))
    sources.append(source)
%% endif
%% if has_xpcc_generator
# Generating XPCC sources
env.Append(CPPPATH="{{ generator_path }}")
ignored.append("{{ generator_path }}")
sources += env.XpccCommunication(
    xmlfile=abspath("{{ generator_source }}"),
    container="{{ generator_container }}",
    path=abspath("{{ generator_path }}"),
    namespace="{{ generator_namespace }}")
%% endif

%% if not is_unittest
# Finding application sources
sources += env.FindSourceFiles(".", ignorePaths=ignored)
%% endif

# Building application
program = env.Program(target=project_name+".elf", source=sources)

%% if openocd_file != ""
# Using a custom OpenOCD script
env.Append(CONFIG_OPENOCD_SEARCHDIRS=[abspath("{{openocd_base_dir}}")])
env.Append(CONFIG_OPENOCD_CONFIGFILES=["{{openocd_file}}"])
%% endif

# SCons functions
env.Alias("cmakewrapper", env.CMakeWrapper())
env.Alias("qtcreator", env.QtCreatorProject(sources))
env.Alias("symbols", env.Symbols(program))
env.Alias("listing", env.Listing(program))
env.Alias("bin", env.Bin(program))
%% if platform in ["hosted"]
env.Alias("build", program)
env.Alias("run", env.Run(program))
env.Alias("all", ["build", "run"])
%% else
    %% if platform in ["stm32"]
env.Alias("size", env.Size(program))
env.Alias("program", env.OpenOcd(program))
    %% elif platform in ["avr"]
env.Alias("program", env.Avrdude(program))
    %% endif
    %#
env.Alias("build", [program, "listing"])
    %% if platform in ["stm32"]
env.Alias("all", ["build", "size"])
    %% else
env.Alias("all", ["build"])
    %% endif
%% endif

env.Default("all")
