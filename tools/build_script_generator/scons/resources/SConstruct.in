# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

import os
from os.path import join, abspath
from pathlib import Path

# User Configurable Options
project_name = "{{ options["::project.name"] }}"
source_dirs = ["."]
source_endings = ["cpp", "cxx", "cc", "c"]
build_path = "{{ build_path }}"
modm_path = "modm"

# SCons environment with all tools
env = Environment(
        toolpath=[join(modm_path, "scons", "site_tools"),
                  join(modm_path, "ext", "dlr", "scons-build-tools", "site_tools")],
        tools=[
%% for tool in build_tools
            "{{tool}}",
%% endfor
            "settings_buildpath",
            "utils_buildformat",
            ],
        ENV=os.environ)
env["BASEPATH"]  = abspath(modm_path)
env["BUILDPATH"] = abspath(build_path)

# Building all libraries
env.SConscript(join(modm_path, "SConscript"), exports="env")

%% if info_git
env.InfoGit()
%% endif
%% if info_build
env.InfoBuild()
%% endif

%% if options["::is_unittest"]
# Building unit tests
headers = [env.File(str(f)) for f in Path(modm_path).glob("test/**/*.hpp")]
files = env.UnittestRunner(target="main.cpp", source=headers, template="modm/test/runner.cpp.in")
%% else
# Finding application sources
env.Append(CPPPATH=source_dirs)
files = []
for path in source_dirs:
    for ending in source_endings:
        files.extend(Path(path).glob("**/*.{}".format(ending)))
files = [env.File(str(f)) for f in files if f.parts[0] != "modm"]
%% endif

%% if image_source != ""
# Finding image sources
for image in Path("{{image_source}}").glob("**/*.pbm"):
    source, header = env.Bitmap(str(image))
    files.append(source)
%% endif
%% if xpcc_source != ""
# Generating XPCC files
files += env.XpccCommunication(
    xmlfile=abspath("{{xpcc_source}}"),
    container="{{xpcc_container}}",
    dtdPath=abspath(join(modm_path, "tools", "system_design", "xml", "dtd")),
    path=abspath("{{xpcc_generate}}"),
    namespace="{{xpcc_namespace}}")
%% endif
%% if openocd_file != ""
# Using a custom OpenOCD script
env.Append(CONFIG_OPENOCD_SEARCHDIRS=[abspath("{{openocd_base_dir}}")])
env.Append(CONFIG_OPENOCD_CONFIGFILES=["{{openocd_file}}"])
%% endif
%#
# Building application
program = env.Program(target=project_name+".elf", source=files)
hexfile = env.Hex(program)

# SCons functions
env.Alias("symbols", env.Symbols(program))
env.Alias("listing", env.Listing(program))
env.Alias("bin", env.Bin(program))
%% if platform in ["hosted"]
env.Alias("build", program)
env.Alias("run", env.Run(program))
env.Alias("all", ["build", "run"])
%% else
    %% if platform in ["stm32"]
env.Alias("size", env.Size(program))
env.Alias("program", env.OpenOcd(program))
    %% elif platform in ["avr"]
env.Alias("program", env.Avrdude(program))
    %% endif
    %#
env.Alias("build", [hexfile, "listing"])
    %% if platform in ["stm32"]
env.Alias("all", ["build", "size"])
    %% else
env.Alias("all", ["build"])
    %% endif
%% endif

env.Default("all")
