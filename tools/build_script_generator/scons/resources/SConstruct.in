# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

import os
from os.path import join, abspath

# User Configurable Options
project_name = "{{ options[":build:project.name"] }}"
build_path = "{{ options[":build:build.path"] }}"
generated_paths = {{ generated_paths }}

# SCons environment with all tools
env = Environment(ENV=os.environ)
env["CONFIG_BUILD_BASE"] = abspath(build_path)
env["CONFIG_PROJECT_NAME"] = project_name

# Building all libraries
env.SConscript(dirs=generated_paths, exports="env")

%% if is_unittest
# Building unit tests
headers = env.FindHeaderFiles("modm/test")
sources = env.UnittestRunner(target="main.cpp", source=headers, template="modm/test/runner.cpp.in")
%% else
env.Append(CPPPATH=".")
ignored = ["cmake-*", ".lbuild_cache", build_path] + generated_paths
sources = []
%% endif

%% if has_image_source
# Generating image sources
env.Append(CPPPATH="{{ image_source }}")
ignored.append("{{ image_source }}")
for image in env.FindFiles("{{ image_source }}", ".pbm"):
    source, _ = env.Bitmap(str(image))
    sources.append(source)
%% endif
%% if has_xpcc_generator
# Generating XPCC sources
env.Append(CPPPATH="{{ generator_path }}")
ignored.append("{{ generator_path }}")
sources += env.XpccCommunication(
    xmlfile=abspath("{{ generator_source }}"),
    container="{{ generator_container }}",
    path=abspath("{{ generator_path }}"),
    namespace="{{ generator_namespace }}")
%% endif

%% if not is_unittest
# Finding application sources
sources += env.FindSourceFiles(".", ignorePaths=ignored)
%% endif

env.BuildTarget(sources)
