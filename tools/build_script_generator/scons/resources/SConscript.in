# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

#!/usr/bin/env python3

import os

Import("env")

env.Append(CPPPATH=[
%% for path in metadata.include_path | sort
    os.path.abspath("{{ path }}"),
%% endfor
])

files = [
%% for file in files
    env.File("{{ file }}"),
%% endfor
]

library = env.StaticLibrary(target="modm", source=files)

env.Append(LIBS=[
    library,
%% for library in metadata.required_library
    "{{ library }}",
%% endfor
])
env.AppendUnique(LIBPATH=[os.path.abspath(str(library[0].get_dir()))])
%% if "required_pkg" in metadata
env.ParseConfig("pkg-config --cflags --libs {{ metadata.required_pkg | join(" ") }}")
%% endif

%% if "cpp.define" in metadata
env.Append(CPPDEFINES=[
%% for define in metadata["cpp.define"]
    "{{ define }}",
%% endfor
])
%% endif

# Toolchain configuration
%# ================================== STM32 ===================================
%% if platform in ["stm32"]
env["CPU"] = "{{ core }}"
env["LINKFLAGS_optimize"] = [
    "-Wl,--relax",
    "-Wl,--gc-sections",
    "-Wl,-wrap,_malloc_r",
    "-Wl,-wrap,_calloc_r",
    "-Wl,-wrap,_realloc_r",
    "-Wl,-wrap,_free_r",
    "--specs=nano.specs",
    "--specs=nosys.specs",
    "-nostartfiles",
]
env.Append(LINKFLAGS_other=["-Wl,--no-wchar-size-warning"])
%# =================================== AVR ====================================
%% elif platform in ["avr"]
env["CCFLAGS_target"] = [
    "-mmcu={{ partname }}",
    "-DF_CPU=${CONFIG_CLOCK_F_CPU}"
]
env.Append(ASFLAGS_target=[
    "-mmcu={{ partname }}",
    "-xassembler-with-cpp",
])
env["LINKFLAGS_other"] = ["-Wl,--fatal-warnings"]
%# ================================== HOSTED ==================================
%% elif platform in ["hosted"]
%% if family in ["darwin"]
env["CXXFLAGS_language"] = ["-std=c++1z"] # for clang 4 or earlier
%% else
env["CXXFLAGS_language"] = ["-std=c++17"]
%% endif
%% endif

%# ============================================================================
env["CFLAGS_language"] = ["-std=gnu11"]
%% if platform in ["stm32", "avr"]
env["CXXFLAGS_language"] = ["-std=c++17", "-fno-exceptions", "-fno-rtti"]
env.Append(LINKFLAGS_target=[
    "-Lmodm/link",
    "-Tlinkerscript.ld"])
%% endif
env.RemoveFromList("CCFLAGS_warning", [
    "-Wshadow",
    "-Wcast-align",
    "-Wmissing-declarations",
    "-Wcast-qual",
    "-Wredundant-decls",])
env.RemoveFromList("CXXFLAGS_warning", [
    "-Wold-style-cast",
    "-Wnon-virtual-dtor"])

# Device configuration
env["CONFIG_DEVICE_NAME"] = "{{ partname }}"
%% if memories | length
env["CONFIG_DEVICE_MEMORY"] = [
%% for memory in memories
    {{ memory }},
%% endfor
]
%% endif

# Programming configuration
%% if platform in ["avr"]
env["CONFIG_AVRDUDE_DEVICE"] = "{{avrdude_mcu}}"
env["CONFIG_AVRDUDE_PROGRAMMER"] = "{{options["::avrdude.programmer"]}}"
env["CONFIG_AVRDUDE_PORT"] = "{{options["::avrdude.port"]}}"
env["CONFIG_AVRDUDE_OPTIONS"] = "{{options["::avrdude.options"]}}"
%% if options["::avrdude.baudrate"] > 0
env["CONFIG_AVRDUDE_BAUDRATE"] = "{{options["::avrdude.baudrate"]}}"
%% endif
%% endif

env.SetDefault(CONFIG_OPENOCD_SEARCHDIRS = [
%% if "openocd.configfile" in metadata
    os.path.abspath("openocd")
%% endif
])
env.SetDefault(CONFIG_OPENOCD_CONFIGFILES = [
%% if "openocd.configfile" in metadata
    %% for configfile in metadata["openocd.configfile"]
    "{{ configfile }}",
    %% endfor
%% endif
])
env.SetDefault(CONFIG_OPENOCD_COMMANDS = [
    "init",
    "reset halt",
    "flash write_image erase $SOURCE",
    "reset halt",
    "mww 0xE000EDF0 0xA05F0000",
    "shutdown"
])

%% if ":platform:clock:f_cpu" in options
env["CONFIG_CLOCK_F_CPU"] = "{{ options[":platform:clock:f_cpu"] }}"
%% endif

env['XPCC_SYSTEM_DESIGN'] = os.path.join(os.path.abspath("."), "tools", "system_design")

%% if platform not in ["hosted"]
# We need to link libmodm.a with --whole-archive, so that all weak symbols are visible to the linker.
# Functions placed in a linker section list (like modm_section(".hardware_init")) are typically not
# referenced externally, so the linker will discard them when searching.
# From https://sourceware.org/binutils/docs/ld/Options.html#Options:
#     For each archive mentioned on the command line after the --whole-archive option, include every object
#     file in the archive in the link, rather than searching the archive for the required object files.
env["_LIBFLAGS"] = '-Wl,--whole-archive ' + env["_LIBFLAGS"] + ' -Wl,--no-whole-archive'
# alternative workaround
# env["LINKCOM"] = env["LINKCOM"].replace('$_LIBFLAGS', '-Wl,--whole-archive $_LIBFLAGS -Wl,--no-whole-archive')
%% endif

Return("library")
