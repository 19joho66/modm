#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os


def init(module):
    module.name = "build.scons"
    module.description = "SCons Build Script Generator"


def prepare(module, options):
    module.add_option(
        BooleanOption(name="include_demo_project", default=False,
                      description="Include a demo main file to get a full compilable project."))
    module.add_option(
        BooleanOption(name="include_sconstruct", default=True,
                      description="Generate modm specific SConstruct file."))
    module.add_option(
        BooleanOption(name="is_unittest", default=False,
                      description="Generate SConstruct file for modm unittests."))

    module.add_option(
        StringOption(name="build.path", default="build",
                     description="Path to the build folder"))
    module.add_option(
        StringOption(name="image.source", default="",
                     description="Path to the image folder"))
    module.add_option(
        StringOption(name="xpcc.source", default="",
                     description="Path to the XPCC source file"))
    module.add_option(
        StringOption(name="xpcc.container", default="",
                     description="Name of the XPCC container to generate for"))
    module.add_option(
        StringOption(name="xpcc.generate", default="communication",
                     description="Path to the XPCC generated folder"))
    module.add_option(
        StringOption(name="xpcc.namespace", default="robot",
                     description="Namespace of the generated XPCC communications"))

    module.add_option(
        BooleanOption(name="info.git", default=False,
                      description="Generate CPP defines about the git repository state"))
    module.add_option(
        BooleanOption(name="info.build", default=False,
                      description="Generate CPP defines about the build state"))

    if options[":target"].identifier["platform"] == "avr":
        # we need the clock:f_cpu option!
        module.depends(":platform:clock")
        module.add_option(
            StringOption(name="avrdude.programmer", default="avrispmkII",
                         description="AvrDude programmer"))
        module.add_option(
            StringOption(name="avrdude.port", default="usb",
                         description="AvrDude programmer port"))
        module.add_option(
            NumericOption(name="avrdude.baudrate", default=-1,
                          description="AvrDude programmer baudrate"))
        module.add_option(
            StringOption(name="avrdude.options", default="",
                         description="AvrDude programmer options"))
    return True


def build(env):
    pass


def post_build(env, buildlog):
    _, default_project_name = os.path.split(os.getcwd())
    target = env["modm:target"]
    platform = target.identifier["platform"]
    family = target.identifier["family"]

    build_tools = []
    if len(env["xpcc.source"]): build_tools.append("system_design");
    if len(env["image.source"]): build_tools.append("bitmap");
    if env["info.git"] or env["info.build"]: build_tools.append("info");
    if env["is_unittest"]: build_tools.append("unittest")

    # Extract all source code files
    env.outbasepath = "modm"
    files_to_build = []
    outpath = env.outpath(".")
    for operations in buildlog:
        filename = os.path.relpath(operations.filename_out, outpath)
        _, extension = os.path.splitext(filename)

        if extension in [".c", ".cpp", ".cc", ".sx", ".S"]:
            files_to_build.append(os.path.normpath(filename))
    files_to_build.sort()

    core_driver = target.get_driver("core")
    core = core_driver["type"]
    if core.startswith("cortex-m4"):
        core = "cortex-m4"
    elif core.startswith("cortex-m7"):
        core = "cortex-m7"
    avrdude_mcu = target._properties["mcu"] if "mcu" in target._properties else ""

    memories = []
    if "memory" in core_driver:
        memories.extend([
            {
                k:(int(v) if v.isdigit() else (int(v, 16) if v.startswith("0x") else v))
                for k, v in memory.items()
            }
            for memory in core_driver["memory"]
        ])

    env.substitutions = {
        "project_name": default_project_name,
        "partname": target.partname,
        "platform": platform,
        "family": family,
        "compiler": "llvm" if family == "darwin" else "gcc",
        "core": core,
        "avrdude_mcu": avrdude_mcu,
        "files": files_to_build,
        "metadata": buildlog.metadata,
        "memories": memories,
        "build_tools": build_tools,
        "info_build": env["info.build"],
        "info_git": env["info.git"],
        "build_path": env["build.path"],
        "image_source": env["image.source"],
        "xpcc_source": env["xpcc.source"],
        "xpcc_container": env["xpcc.container"],
        "xpcc_generate": env["xpcc.generate"],
        "xpcc_namespace": env["xpcc.namespace"],
    }

    env.append_metadata_unique('include_path', 'src')
    env.template("resources/SConscript.in", "SConscript")

    # Copy the scons-build-tools
    env.copy(repopath("ext/dlr/scons-build-tools"), "ext/dlr/scons-build-tools")
    env.copy("site_tools", "scons/site_tools")
    if "system_design" in build_tools:
        env.copy(repopath("tools/system_design"), "tools/system_design")

    # these are the ONLY files that are allowed to NOT be namespaced with modm!
    env.outbasepath = "."
    if env["include_demo_project"]:
        env.template("resources/main.cpp.in", "main.cpp")
    if env["include_demo_project"] or env["include_sconstruct"]:
        env.template("resources/SConstruct.in", "SConstruct")
