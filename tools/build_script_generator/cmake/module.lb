#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2018, Sergiy Yevtushenko
# Copyright (c) 2018-2019, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os
from os.path import join

def init(module):
    module.name = ":build:cmake"
    module.description = FileReader("module.md")


def prepare(module, options):
    if options[":target"].identifier["platform"] != "stm32":
        return False

    module.add_option(
        BooleanOption(name="include_makefile", default=True,
                      description=descr_include_makefile))

    return True


def build(env):
    project_name = env[":build:project.name"]
    build_path = env[":build:build.path"]
    env.collect("::elf.release", join(build_path, "cmake-build-release", project_name + ".elf"))
    env.collect("::elf.debug",   join(build_path, "cmake-build-debug",   project_name + ".elf"))


def post_build(env):
    target = env["modm:target"]
    # get CPU information
    subs = env.query("::device")
    # Extract all source code files
    subs["sources"] = sorted(p for sources in env.query("::source_files").values() for p in sources)
    # get memory information
    subs["memories"] = env.query("::memories")
    # get generic build flags information
    subs["flags"] = env.query("::collect_flags")(env)[None]

    # Add SCons specific data
    subs.update({
        "project_path": os.getcwd(),
        "compiler": "gcc",
        "project_name": env[":build:project.name"],
        "build_path": env[":build:build.path"],
        "include_paths": env.collector_values(":build:path.include"),
    })
    # Set these substitutions for all templates
    env.substitutions = subs

    def flag_format(flag):
        subs = {
            "target_base": "${CMAKE_PROJECT_NAME}",
            "linkdir": "link"
        }
        flag = flag.format(**subs)
        return flag

    env.outbasepath = "modm/cmake"
    env.copy("cmake_scripts/report-build-options.cmake", "report-build-options.cmake")
    env.template("cmake_scripts/configure-stm32-gcc.cmake.in", "configure-stm32-gcc.cmake", filters={"flag_format": flag_format})

    # these are the ONLY files that are allowed to NOT be namespaced with modm!
    env.outbasepath = "."
    env.template("resources/CMakeLists.txt.in", "CMakeLists.txt")
    if env["include_makefile"]:
        env.template("resources/Makefile.in", "Makefile")

# ============================ Option Descriptions ============================
descr_include_makefile = """# Generate a wrapper Makefile

!!! warning "This overwrites any top-level `Makefile` file!"
"""
