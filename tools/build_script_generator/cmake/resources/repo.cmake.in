# Copyright (c) 2018, Sergiy Yevtushenko
# Copyright (c) 2018-2019, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# This file was autogenerated by the modm cmake builder. Do not modify!

%% if is_modm
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/configure-gcc.cmake)

if(BUILD_TESTS)
    message(STATUS "Unit Test")

    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt")
        message("Found CMakeLists.txt in test directory")
    else()
        message(STATUS "CMakeLists.txt not found, will create it...")
        file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/test/CMakeLists.txt "CMAKE_MINIMUM_REQUIRED(VERSION 3.13)\n\ntarget_sources(${CMAKE_PROJECT_NAME}\n    PRIVATE\n        DocTest.cpp\n)\n\n#add_subdirectroy()\n")
    endif()
else()
    message(STATUS "Cross Compile")

    if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists.txt")
        message("Found CMakeLists.txt in scr directory")
    else()
        message(STATUS "CMakeLists.txt not found, will create it...")
        file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists.txt "CMAKE_MINIMUM_REQUIRED(VERSION 3.13)\n\ntarget_sources(${CMAKE_PROJECT_NAME}\n    PRIVATE\n        main.cpp\n)\n\n#add_subdirectroy()\n")
    endif()
endif()
%% endif

# Toolchain configuration
if(NOT BUILD_TESTS)
%% macro generate_flags_for_profile(name, profile)
set({{ name | upper }}{{ "_" ~ (profile | upper) if profile | length else "" }} "\
%% for flag in flags[name][profile] | sort
    {{ flag | flags_format }} \
%% endfor
")
%% endmacro

%% macro generate_flags(name)
%% for profile in ["", "release", "debug"]
{{ generate_flags_for_profile(name, profile) }}
%% endfor
%% endmacro

{{ generate_flags("cppdefines") }}
{{ generate_flags("ccflags") }}
{{ generate_flags("cflags") }}
{{ generate_flags("cxxflags") }}
{{ generate_flags("asflags") }}
{{ generate_flags("archflags") }}
{{ generate_flags("linkflags") }}

%% if is_modm
string(APPEND CCFLAGS "${ARCHFLAGS}")
string(APPEND ASFLAGS "${ARCHFLAGS}")
string(APPEND LINKFLAGS "${ARCHFLAGS}")
%% endif

string(APPEND CMAKE_C_FLAGS         "${CCFLAGS} ${CFLAGS}")
string(APPEND CMAKE_C_FLAGS_RELEASE "${CCFLAGS_RELEASE}")
string(APPEND CMAKE_C_FLAGS_DEBUG   "${CCFLAGS_DEBUG}")

string(APPEND CMAKE_CXX_FLAGS         "${CCFLAGS} ${CXXFLAGS}")
string(APPEND CMAKE_CXX_FLAGS_RELEASE "${CCFLAGS_RELEASE}")
string(APPEND CMAKE_CXX_FLAGS_DEBUG   "${CCFLAGS_DEBUG}")

string(APPEND CMAKE_ASM_FLAGS         "${ASFLAGS}")
string(APPEND CMAKE_ASM_FLAGS_RELEASE "${ASFLAGS_RELEASE}")
string(APPEND CMAKE_ASM_FLAGS_DEBUG   "${ASFLAGS_DEBUG}")

string(APPEND CMAKE_EXE_LINKER_FLAGS         "${LINKFLAGS}")
string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE "${LINKFLAGS_RELEASE}")
string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG   "${LINKFLAGS_DEBUG}")

else()

SET(CCFLAGS "\
    -fdata-sections \
    -ffunction-sections \
    -finline-limit=10000 \
    -fshort-wchar \
    -fsingle-precision-constant \
    -funsigned-bitfields \
    -funsigned-char \
    -fwrapv \
    -g3 \
    -gdwarf \
    -W \
    -Wall \
    -Wdouble-promotion \
    -Wduplicated-cond \
    -Werror=format \
    -Werror=maybe-uninitialized \
    -Werror=overflow \
    -Werror=sign-compare \
    -Wextra \
    -Wlogical-op \
    -Wpointer-arith \
    -Wundef \
")

SET(CCFLAGS_RELEASE "\
    -Os \
")

#SET(CCFLAGS_DEBUG "\
#    -fno-move-loop-invariants \
#    -fno-split-wide-types \
#    -fno-tree-loop-optimize \
#    -Og \
#")

SET(CCFLAGS_DEBUG "\
    -ggdb \
")

SET(CFLAGS "\
    -std=gnu11 \
    -Wbad-function-cast \
    -Wimplicit \
    -Wnested-externs \
    -Wredundant-decls \
    -Wstrict-prototypes \
")

SET(CXXFLAGS "\
    -std=c++17 \
    -v \
")

SET(ASFLAGS "\
    -g3 \
    -gdwarf \
")


SET(ARCHFLAGS "\
    -mcpu=cortex-m4 \
    -mfloat-abi=hard \
    -mfpu=fpv4-sp-d16 \
    -mthumb \
")


SET(LINKFLAGS "\
    -lstdc++ \
")

SET(CMAKE_CXX_FLAGS "${CXXFLAGS}" CACHE INTERNAL "cxx compiler flags")
SET(CMAKE_CXX_FLAGS_DEBUG   "${CCFLAGS_DEBUG}"            CACHE INTERNAL "cxx compiler flags debug")
SET(CMAKE_EXE_LINKER_FLAGS  "${LINKFLAGS}" CACHE INTERNAL "linker flags")

endif()

add_definitions("${CPPDEFINES}")
if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_definitions("${CPPDEFINES_RELEASE}")
endif()
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_definitions("${CPPDEFINES_DEBUG}")
endif()

%% if include_paths | length
include_directories(
%% for path in include_paths | sort
    ${CMAKE_CURRENT_LIST_DIR}/{{ path | relocate | modm.windowsify(escape_level=0) }}
%% endfor
)
%% endif

%% if library_paths | length
link_directories(
%% for path in library_paths | sort
    ${CMAKE_CURRENT_LIST_DIR}/{{ path | relocate | modm.windowsify(escape_level=0)}}
%% endfor
)
%% endif

%% if libraries | length
link_libraries(
%% for library in libraries | sort
    {{ library }}
%% endfor
)
%% endif

%% if packages | length
pkg_check_modules(PACKAGES "{{ packages | sort | join(" ") }}")
include_directories(${PACKAGES_INCLUDE_DIRS})
add_definitions(${PACKAGES_CFLAGS})
link_directories(${PACKAGES_LIBRARY_DIRS})
link_libraries(${PACKAGES_LIBRARIES})
list(JOIN PACKAGES_LDFLAGS_OTHER " " PACKAGES_LDFLAGS_OTHER)
string(APPEND CMAKE_EXE_LINKER_FLAGS "${PACKAGES_LDFLAGS_OTHER}")
%% endif

%% if sources | length
list(APPEND SOURCE_FILES
%% for file, flags in sources | sort
    ${CMAKE_CURRENT_LIST_DIR}/{{ file | relocate | modm.windowsify(escape_level=0)}}
%% endfor
)
%% endif

%% if asm_sources | length
set_source_files_properties(
%% for file in asm_sources | sort
    ${CMAKE_CURRENT_LIST_DIR}/{{ file | relocate | modm.windowsify(escape_level=0)}}
%% endfor
    PROPERTIES LANGUAGE CXX
)
%% endif

%% for file, flags in sources if flags | length
    %% for profile, pflags in flags.items() if pflags | length
        %% if profile == ""
set_source_files_properties(${CMAKE_CURRENT_LIST_DIR}/{{ file | relocate | modm.windowsify(escape_level=0)}} PROPERTIES COMPILE_FLAGS "{{ pflags | join(" ")}}")
        %% else
if(CMAKE_BUILD_TYPE STREQUAL "{{ profile | capitalize }}")
    set_source_files_properties(${CMAKE_CURRENT_LIST_DIR}/{{ file | relocate | modm.windowsify(escape_level=0)}} PROPERTIES COMPILE_FLAGS "{{ pflags | join(" ")}}")
endif()
        %% endif
    %% endfor
%% endfor
