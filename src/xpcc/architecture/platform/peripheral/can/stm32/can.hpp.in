// coding: utf-8
/* Copyright (c) 2011-2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_CAN{{ id }}_HPP
#define XPCC_STM32_CAN{{ id }}_HPP

#include <xpcc/communication/can/message.hpp>
#include "../../../device.hpp"
#include "../../../type_ids.hpp"

#include "error_code.hpp"
#include "can_filter.hpp"

namespace xpcc
{

namespace stm32
{
/**
 * @brief		Basic Extended CAN{{ id }}
 * 
 * The Basic Extended CAN peripheral, named bxCAN, interfaces the CAN
 * network. It supports the CAN protocols version 2.0A and B. It has
 * been designed to manage a high number of incoming messages
 * efficiently with a minimum CPU load.
 * 
 * <h2>Filter</h2>
 * 
 * For connectivity line devices there are 28 filter banks,
 * i=0 .. 27, in other devices there are 14 filter banks i = 0 ..13.
 * 
 * The 28 filter banks for the connectivity line devices are
 * shared between CAN1 and CAN2.
 * 
 * <h2>Configuration</h2>
 * 
 * \code
 * STM32_CAN{{ id }}_TX_BUFFER_SIZE
 * STM32_CAN{{ id }}_RX_BUFFER_SIZE
 * \endcode
 * 
 * @author		Fabian Greif <fabian.greif@rwth-aachen.de>
 * @ingroup		stm32
 */
class Can{{ id }}
{
public:
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::Can{{ id }}Rx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::Can{{ id }}Tx Tx;
public:
	/**
	 * Enables the clock for the CAN controller and resets all settings
	 * 
	 * \param bitrate
	 * 			CAN bitrate (defined in driver/connectivity/can/message.hpp)
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 * \param overwriteOnOverrun
	 * 			Once a receive FIFO is full the next incoming message
	 * 			will overwrite the previous one if \c true otherwise
	 * 			the incoming message will be discarded
	 * 
	 * \warning	Has to called after configurePins(), but before any
	 * 			other function from this class!
	 */
	static bool
	initialize(can::Bitrate bitrate, uint32_t interruptPriority,
			bool overwriteOnOverrun = true);
	
	/**
	 * The the operating mode.
	 * 
	 * Default after initialization is the normal mode.
	 */
	static void
	setMode(can::Mode mode);
	
public:
	static bool
	isMessageAvailable();

	static bool
	getMessage(can::Message& message);

	/**
	 * The CAN controller has a free slot to send a new message.
	 * \return true if a slot is available, false otherwise
	 */
	static bool
	isReadyToSend();

	/**
	 * Send a message over the CAN.
	 * \return true if the message was send, false otherwise
	 */
	static bool
	sendMessage(const can::Message& message);

public:
	/**
	 * Get Receive Error Counter.
	 *
	 * In case of an error during reception, this counter is
	 * incremented by 1 or by 8 depending on the error condition as
	 * defined by the CAN standard. After every successful reception
	 * the counter is decremented by 1 or reset to 120 if its value
	 * was higher than 128. When the counter value exceeds 127, the
	 * CAN controller enters the error passive state.
	 */
	static inline uint8_t
	getReceiveErrorCounter()
	{
		return (CAN{{ id }}->ESR & CAN_ESR_REC) >> 24;
	}

	/**
	 * Get Transmit Error Counter.
	 *
	 */
	static inline uint8_t
	getTransmitErrorCounter()
	{
		return (CAN{{ id }}->ESR & CAN_ESR_TEC) >> 16;
	}

	static can::BusState
	getBusState();
	
	/**
	 * Enable the error and status change interrupt.
	 * 
	 * Can be generated by the following events:
	 * - Error condition, for more details on error conditions please
	 *   refer to the CAN Error Status register (CAN_ESR).
	 * - Wakeup condition, SOF monitored on the CAN Rx signal.
	 * - Entry into Sleep mode
	 * 
	 * You need to create you own interrupt handler for this interrupt.
	 * The interrupt handler has a fixed name:
	 * \code
	 * extern "C" void
	 * CAN{{ id }}_SCE_IRQHandler()
	 * {
	 *     ...
	 *     
	 *     // e.g. Acknowledge interrupt
	 *     CAN{{ id }}->MSR = CAN_MSR_ERRI;
	 * }
	 * \endcode
	 * 
	 * \param interruptEnable
	 * 			Upper 24-bit of the CAN_IER register. E.g.:
	 * 			 - CAN_IER_BOFIE
	 * 			 - CAN_IER_EPVIE
	 * 			 - ... 
	 * 			See Reference Manual >> bxCAN >> CAN_IER Register
	 * \param interruptPriority
	 * 			Interrupt vector priority (0=highest to 15=lowest)
	 */
	static void
	enableStatusChangeInterrupt(uint32_t interruptEnable,
			uint32_t interruptPriority);
};
}
}
#endif	//  XPCC_STM32_CAN{{ id }}_HPP

