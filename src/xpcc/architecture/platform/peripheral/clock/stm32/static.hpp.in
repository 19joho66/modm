// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

%%	import '../common/static.macros' as static with context

#ifndef XPCC_STM32__STATIC_HPP
#define XPCC_STM32__STATIC_HPP

#include <stdint.h>		// uint32_t
#include "../../../device.hpp"
#include "../common/common_clock.hpp"
#include "pll_calculator.hpp"
#include "clock.hpp"

using namespace xpcc::clock;

namespace xpcc
{
	namespace stm32
	{
		namespace S
		{

		/*
		 * Used to setup pll with constants
		 */
		template<int InputFrequency, int OutputFrequency, int UsbFrequency>
		class PllSetup
		{
		private:
%% if target is stm32f2
			typedef Stm32F2F4PllSettings<MHz64,  InputFrequency, OutputFrequency, UsbFrequency> p;
%% elif target is stm32f4
			typedef Stm32F2F4PllSettings<MHz192, InputFrequency, OutputFrequency, UsbFrequency> p;
%% endif
		public:
			static StartupError
			enable(ClockTree::PllSource src)
			{
				ClockTree::enablePll(src, p::PllM, p::PllN, p::PllP, p::PllQ);
				return StartupError::None;
			}
		};

%% set internalClock =		{'name': "InternalClock",
							 'fixedFrequency': "MHz16" }
%% set externallClock =		{'name': "ExternalClock",
							 'minFrequency': "MHz4",
							 'maxFrequency': "MHz26" }
%% set externalOscillator =	{'name': "ExternalOscillator",
							 'minFrequency': "MHz4",
							 'maxFrequency': "MHz26" }
%% set pll =				{'name': "Pll",
							 'setup': "PllSetup",
							 'frequencies': ["UsbFrequency"],
							 'sources': [internalClock,
										externallClock, externalOscillator] }
%% set systemClock =		{'name': "SystemClock",
							 'minFrequency': "MHz8",
							 'maxFrequency': "MHz168",
							 'sources': [ internalClock, externallClock,
										  externalOscillator, pll ] }
%% set mco1 =				{'name': "MCO1",
							 'divisions': [1, 2, 3, 4, 5],
							 'sources': [internalClock, externallClock,
										 externalOscillator, pll] }
%#							TODO: Add more sources
%% set mco2 =				{'name': "MCO2",
							 'divisions': [1, 2, 3, 4, 5],
							 'sources': [externallClock,
										 externalOscillator, pll] }
%#							TODO: Add more sources

	// Static Clocks/Plls/Osciallators
{{ static.source(internalClock) }}

{{ static.source(externallClock) }}

{{ static.source(externalOscillator) }}

{{ static.pll(pll) }}

{{ static.sink(systemClock)}}

{{ static.output(mco1)}}

{{ static.output(mco2)}}

		}
	}
}

#endif	//  XPCC_STM32__STATIC_HPP
