// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32__CLOCK_HPP
#define XPCC_STM32__CLOCK_HPP

#include <stdint.h>
#include "../common/common_clock.hpp"
// #include "static.hpp"

using namespace xpcc::clock;

namespace xpcc
{
	namespace stm32
	{
		/**
		 * Clock management.
		 * 
		 * For using the internal clock (which is 16MHz) use:
		 * \code
		 * typedef xpcc::stm32::Clock C;
		 * enablePll(C::PllSource::PLL_HSI, 8, 120);	// for STM32F2xx
		 * enablePll(C::PllSource::PLL_HSI, 8, 168);	// for STM32F4xx
		 * switchToPll();
		 * \endcode
		 * 
		 * For using an external crystal with 8 MHz use:
		 * \code
		 * typedef xpcc::stm32::Clock C;
		 * if (enableHse(C::HseConfig::HSE_CRYSTAL))
		 * {
		 *     enablePll(C::PllSource::PLL_HSE, 4, 120);	// for STM32F2xx
		 *     enablePll(C::PllSource::PLL_HSE, 4, 168);	// for STM32F4xx
		 *     switchToPll();
		 * }
		 * \endcode
		 *
		 * For using an external oscillator with 25 MHz use:
		 * \code
		 * if (enableHse(HSE_BYPASS))
		 * {
		 *     enablePll(PLL_HSE, 25, 240);	// for STM32F2xx
		 *     enablePll(PLL_HSE, 25, 336);	// for STM32F4xx
		 *     switchToPll();
		 * }
		 * \endcode
		 * 
		 * \ingroup	stm32f2_4
		 */
		class ClockTree
		{
		public:
			enum class ClockSource
			{
				InternalClock,
				ExternalClock,
				ExternalOscillator,
			};

			enum class PllSource
			{
				Hsi = 0,		///< High speed internal clock (16 MHz)
				Hse = 1,		///< High speed external clock (see HseConfig)
				InternalClock = Hsi,
				ExternalClock = Hse,
				ExternalOscillator = Hse,
			};

			enum class SystemClockSource : uint32_t
			{
				Hsi = RCC_CFGR_SW_HSI,
				Hse = RCC_CFGR_SW_HSE,
				Pll = RCC_CFGR_SW_PLL,
				InternalClock = Hsi,
				ExternalClock = Hse,
				ExternalOscillator = Hse,
			};

			enum class MCO1Source : uint32_t
			{
				InternalClock = 0,
				ExternalClock = RCC_CFGR_MCO1_1,
				ExternalOscillator = RCC_CFGR_MCO1_1,
				Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
			};

			enum class MCO2Source : uint32_t
			{
				SystemClock = 0,
				ExternalClock = RCC_CFGR_MCO1_1,
				ExternalOscillator = RCC_CFGR_MCO1_1,
				Pll = RCC_CFGR_MCO1_1 | RCC_CFGR_MCO1_0,
			};
		public:
			/*
			 * XPCC Static Clock Standard Interface
			 * requires source frequency in **kHz**
			 */
			static inline bool
			enableSource(ClockSource src, uint32_t kHz, uint32_t waitCycles = 1500);


			/**
			 * Enable PLL.
			 * 
			 * \code
			 * VCO input frequency = PLL input clock frequency / PLLM [with 2 ≤ PLLM ≤ 63]
			 * VCO output frequency = VCO input frequency × PLLN [with 64 ≤ PLLN ≤ 432]
			 * \endcode
			 * 
			 * \param	source 
			 * 		Source select for PLL and for plli2s. If you are using
			 * 		HSE you must enable it first (see enableHse()).
			 *
			 * \param	pllM
			 * 		Division factor for the main PLL (PLL) and
			 * 		audio PLL (PLLI2S) input clock (with 2 ≤ pllM ≤ 63).
			 *		The software has to set these bits correctly to ensure
			 *		that frequency of selected source divided by pllM
			 *		is in ranges from 1 to 2 MHz.
			 * 
			 * \param	pllN
			 * 		Main PLL (PLL) multiplication factor for VCO (with 64 ≤ pllN ≤ 432).
			 * 		The software has to set these bits correctly to ensure
			 * 		that the VCO output frequency is
			 * 		 - 336 MHz for ST32F4. Core will run at 168 MHz.
			 *		 - 240 MHz for ST32F2. Core will run at 120 MHz.
			 * 
			 * Example:
			 * 
			 */

			static inline void
			enablePll(PllSource source, uint8_t pllM,
							uint16_t pllN, uint8_t pllP, uint8_t pllQ);

			static inline bool
			switchSystemClockTo(SystemClockSource src, uint32_t waitCycles = 1500);

			static inline void
			connectToMCO1(MCO1Source src)
			{
				uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO1);
				RCC->CFGR = tmp | static_cast<uint32_t>(src);
			}

			static inline void
			setMCO1Division(int div)
			{
				uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO1PRE);
				if (div > 1) tmp |= (div + 2) << 24;
				RCC->CFGR = tmp;
			}

			static inline void
			connectToMCO2(MCO2Source src)
			{
				uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO2);
				RCC->CFGR = tmp | static_cast<uint32_t>(src);
			}

			static inline void
			setMCO2Division(int div)
			{
				uint32_t tmp = RCC->CFGR & ~(RCC_CFGR_MCO2PRE);
				if (div > 1) tmp |= (div + 2) << 27;
				RCC->CFGR = tmp;
			}
		};
	}
}

#include "clock_impl.hpp"

#endif	//  XPCC_STM32__CLOCK_HPP
