%# coding: utf-8
%# ----------------------------------------------------------------------------
%#* Copyright (c) 2011, Roboterclub Aachen e.V.
%#* All rights reserved.
%#*
%#* Redistribution and use in source and binary forms, with or without
%#* modification, are permitted provided that the following conditions are met:
%#* 
%#*     * Redistributions of source code must retain the above copyright
%#*       notice, this list of conditions and the following disclaimer.
%#*     * Redistributions in binary form must reproduce the above copyright
%#*       notice, this list of conditions and the following disclaimer in the
%#*       documentation and/or other materials provided with the distribution.
%#*     * Neither the name of the Roboterclub Aachen e.V. nor the
%#*       names of its contributors may be used to endorse or promote products
%#*       derived from this software without specific prior written permission.
%#*
%#* THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
%#* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%#* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%#. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
%#* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
%#* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
%#* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
%#* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
%#* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%#*/

%% macro inputSource(name, f_min="", f_max="", enable_fcn="")
%% set fixed_frequency = (f_min == f_max)
%%	if fixed_frequency
	template<int InputFrequency> class {{ name }};
	template<>
	class
	{{ name }}<{{ f_min }}>
%%	else
	template<int InputFrequency>
	class
	{{ name }}
%%	endif
	{
	private:
%%		if f_min|length > 0 and not fixed_frequency
		static_assert(InputFrequency >= {{ f_min }},
			"Input Frequenzy of HSE needs to be higher or equal to {{ f_min }}");
%%		endif
%%		if f_max|length > 0 and not fixed_frequency
		static_assert(InputFrequency <= {{ f_max }},
			"Input Frequenzy of HSE needs to be lower or equal to {{ f_max }}");
%%		endif
	public:
		static StartupError
		enable(const uint32_t waitCycles = 1500)
		{
%%		if not 'waitCycles' in enable_fcn
			(void)waitCycles; // avoid compiler warning
%%		endif
%%		if enable_fcn|length > 0
			if (!{{ enable_fcn }})
				return StartupError::{{ name }};
%%		endif

			return StartupError::None;
		}

		static constexpr int
%% if fixed_frequency
		outputFrequency = {{ f_min }};
%% else
		outputFrequency = InputFrequency;
%% endif
	};
%% endmacro
