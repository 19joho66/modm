// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32F3_DMA{{ id }}_HPP
#define XPCC_STM32F3_DMA{{ id }}_HPP

#include <stdint.h>
#include "../../../type_ids.hpp"
#include "../../../device.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * DMA
 *
 * Does not support - among other things - double buffering or FIFO usage
 *
 * \author	Kevin Laeufer
 * \ingroup	stm32
 */
class Dma{{ id }}
{
public:
	static inline void
	enable();

	static inline void
	disable();


public:
%% for stream in range(0,8)
	class Stream{{ stream }} : public DmaBase
	{
	public:
	%% set pointer_types = [8, 16, 32]
	%% for type in pointer_types
		/// will disable the stream
		static inline void
		setMemorySource(uint{{type}}_t* address,
			MemoryIncrementMode inc = MemoryIncrementMode::Increment,
			MemoryBurstTransfer transfer = MemoryBurstTransfer::Single);

		/// will disable the stream
		static inline void
		setPeripheralSource(uint{{type}}_t* address,
			PeripheralIncrementMode inc = PeripheralIncrementMode::Fixed,
			PeripheralBurstTransfer transfer = PeripheralBurstTransfer::Single);
	%% endfor

	%% for type in pointer_types
		/// will disable the stream
		static inline void
		setMemoryDestination(uint{{type}}_t* address,
			MemoryIncrementMode inc = MemoryIncrementMode::Increment,
			MemoryBurstTransfer transfer = MemoryBurstTransfer::Single);

		/// will disable the stream
		static inline void
		setPeripheralDestination(uint{{type}}_t* address,
			PeripheralIncrementMode inc = PeripheralIncrementMode::Fixed,
			PeripheralBurstTransfer transfer = PeripheralBurstTransfer::Single);
	%% endfor

		static inline void
		stop();

		/// will disable the stream
		static inline void
		configure(Channel channel, uint16_t sample_length,
			Priority priority = Priority::Medium, FlowControl flow = FlowControl::Dma);

		static inline void
		start();

		static inline bool
		isFinished();

		static inline DataTransferDirection
		getDataTransferDirection();
	};
%% endfor
};
}
}

#include "dma_{{ id }}_impl.hpp"

#endif	// XPCC_STM32F3_DMA{{ id }}_HPP

