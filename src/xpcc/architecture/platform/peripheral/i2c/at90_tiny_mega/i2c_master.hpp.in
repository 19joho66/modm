// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2009, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_{{target.family | upper}}__I2C_MASTER_HPP
#define XPCC_{{target.family | upper}}__I2C_MASTER_HPP

#include "../../../device.hpp"
#include "../../../drivers.hpp"
#include <xpcc/architecture/peripheral/i2c.hpp>

namespace xpcc
{
	namespace {{target.family}}
	{
		struct I2c
		{
			%% for gpio in gpios
			typedef ::xpcc::{{target.family}}::Gpio{{ gpio.port }}{{ gpio.id }} {{ gpio.name | capitalize }};
			%% endfor
		};
		
		/**
		 * \brief	Interrupt-driven I2C master module.
		 *
		 * Interrupts must be enabled.
		 * 
		 * \author Niklas Hauser
		 * \ingroup	{{target.family}}
		 */
		class I2cMaster : public ::xpcc::I2cMaster, I2c
		{
		public:
			static void
			initialize(DataRate rate=DataRate::Standard);
			
			static void
			reset(DetachCause cause=DetachCause::SoftwareReset);
			
		public:
			static bool
			start(xpcc::I2cDelegate *delegate);
			
			static bool
			startSync(xpcc::I2Delegate *delegate);
			
			static Error
			getErrorState();
		};
	}
}

#endif
