// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_ATXMEGA__I2C_MASTER_{{ id }}_HPP
#define XPCC_ATXMEGA__I2C_MASTER_{{ id }}_HPP

#include "../../../device.hpp"
#include "../../../drivers.hpp"
#include <xpcc/architecture/peripheral/i2c.hpp>

namespace xpcc
{
	namespace xmega
	{
		/// @ingroup	xmega
		/// @ingroup	i2c
		struct I2c{{ id }}
		{
			///@{
			/// GPIOs for the I2C pins
			typedef ::xpcc::xmega::Gpio{{ id }}0 Sda;
			typedef ::xpcc::xmega::Gpio{{ id }}1 Scl;
			///@}
		};
		
		/**
		 * Asynchronous I2C master module for Port {{ id }}
		 *
		 * Interrupts must be enabled.
		 * 
		 * @author Niklas Hauser
		 * @ingroup	xmega
		 * @ingroup	i2c
		 */
		class I2cMaster{{ id }} : ::xpcc::I2cMaster, public I2c{{ id }}
		{
		public:
			/**
			 * Set up the I2C module for master operation
			 *
			 * @param	rate
			 *		`Standard` or `Fast`, `High` datarate is not supported by the Xmega
			 */
			template<DataRate rate=DataRate::Standard>
			static ALWAYS_INLINE void
			initialize()
			{
				constexpr uint32_t rawRate = static_cast<uint32_t>(rate);
				static_assert(rawRate <= 400000, "The Xmega does not support High I2C baudrate.");
				static_assert(F_CPU/10 >= rawRate, "The CPU frequency needs to be 10x higher than I2C baudrate.");
				
				// set the baud rate register
				constexpr uint8_t baud = (F_CPU / ( 2 * rawRate)) - 5;
				initializeWithBaud(baud);
			}
			
			static void
			reset(DetachCause cause=DetachCause::SoftwareReset);
			
		public:
			static bool
			start(xpcc::I2cDelegate *delegate);
			
			static bool
			startSync(xpcc::I2cDelegate *delegate);
			
			static Error
			getErrorState();
		
		private:
			static void
			initializeWithBaud(uint8_t baud);
		};
	}
}

#endif
