// coding: utf-8
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_STM32_I2C_{{ id }}_HPP
#define XPCC_STM32_I2C_{{ id }}_HPP

#include "../../../device.hpp"
#include <xpcc/architecture/peripheral/i2c.hpp>
#include "type_ids.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * I2cMaster implementation of I2C{{ id }} module.
 *
 * Interrupts must be enabled.
 *
 * @author		Georgi Grinshpun
 * @author		Niklas Hauser
 * @ingroup		stm32
 */
class I2cMaster{{ id }} : ::xpcc::I2cMaster
{
public:
	static const TypeId::I2cMaster{{ id }}Sda Sda;
	static const TypeId::I2cMaster{{ id }}Scl Scl;

public:
	/**
	 * Set up the I2C module for master operation.
	 *
	 * @param	rate
	 *		`Standard` or `Fast`, `High` datarate is not supported
	 */
	template<class clockSource, uint32_t rate=DataRate::Standard
			uint16_t tolerance = xpcc::Tolerance::FivePercent >
	static ALWAYS_INLINE void
	initialize()
	{
		static_assert(rate <= 400000,
				"The STM32 does not support I2C baudrates above 400kHz.");
		static_assert(clockSource::I2c{{ id }}/2 >= rate,
				"The APB1 frequency needs to be at least 2x higher than I2C baudrate.");

		// set the prescaler rate register
		// ccrPrescaler = peripheralFrequency / (2 * I2CFrequency)
		constexpr uint16_t prescaler = clockSource::I2c{{ id }} / (2 * rate);

		xpcc::Tolerance::assertBaudrateInTolerance<
				/* clostest available baudrate */ (clockSource::I2c{{ id }} / (2 * prescaler)),
				/* desired baudrate */ rate,
				tolerance >();

		initializeWithPrescaler(static_cast<uint8_t>(clockSource::I2c{{ id }} / 1000000), prescaler);
	}

	// start documentation inherited
	static bool
	start(xpcc::I2cDelegate *delegate);

	static bool
	startBlocking(xpcc::I2cDelegate *delegate);

	static Error
	getErrorState();

	static void
	reset(DetachCause cause=DetachCause::SoftwareReset);
	// end documentation inherited

private:
	static void
	initializeWithPrescaler(uint8_t peripheralFrequency, uint16_t prescaler);
};

} // namespace stm32

} // namespace xpcc

#endif // XPCC_STM32_I2C_{{ id }}_HPP
