// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP
#define XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP

#include <xpcc/architecture/peripheral/spi.hpp>
#include "type_ids.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * Serial peripheral interface of the Uart module
 * 
 * Simple unbuffered implementation.
 * @ingroup		stm32
 */
class UartSpiSimpleMaster{{ id }} : public xpcc::SpiSimpleMaster
{
private:
	static bool finished;
public:
	static const TypeId::UartSpiMaster{{ id }}Sck  Sck;
	static const TypeId::UartSpiMaster{{ id }}Miso Miso;
	static const TypeId::UartSpiMaster{{ id }}Mosi Mosi;

public:
	template< class clockSource, uint32_t baudrate >
	static ALWAYS_INLINE void
	initialize()
	{
		finished = true;
	}

	static void
	setDataMode(DataMode mode);

	static void
	setDataOrder(DataOrder order);

	static uint8_t
	writeReadBlocking(uint8_t data);

	static void
	writeBlocking(uint8_t data);

	static bool
	write(uint8_t data);

	static uint8_t
	getResult();

	static bool
	transfer(uint8_t * tx, uint8_t * rx, std::size_t length);

	static bool
	isFinished();
};

} // namespace stm32

} // namespace xpcc

#endif // XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP
