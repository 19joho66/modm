// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_UART_SIMPLE_SPI{{ id }}_HPP
#	error	"Don't include this file directly, use 'uart_simple_spi{{ id }}.hpp' instead!"
#endif

//bool xpcc::stm32::UartSpiSimpleMaster{{ id }}::finished;

// ----------------------------------------------------------------------------
void
xpcc::stm32::UartSpiSimpleMaster{{ id }}::setDataMode(DataMode /*mode*/)
{
	
}

void
xpcc::stm32::UartSpiSimpleMaster{{ id }}::setDataOrder(DataOrder /*order*/)
{
	
}

uint8_t
xpcc::stm32::UartSpiSimpleMaster{{ id }}::writeReadBlocking(uint8_t /*data*/)
{
	return 0;
}

void
xpcc::stm32::UartSpiSimpleMaster{{ id }}::writeBlocking(uint8_t /*data*/)
{
	
}

bool
xpcc::stm32::UartSpiSimpleMaster{{ id }}::write(uint8_t /*data*/)
{
	return true;
}

uint8_t
xpcc::stm32::UartSpiSimpleMaster{{ id }}::getResult()
{
	return 0;
}

bool
xpcc::stm32::UartSpiSimpleMaster{{ id }}::transfer(uint8_t * tx, uint8_t * rx,
		std::size_t length)
{
	if (!isFinished())
		return false;

//	finished = false;

	uint_fast8_t tx_byte = 0xff;
	uint_fast8_t rx_byte;

	for (std::size_t i = 0; i < length; i++)
	{
		if (tx) tx_byte = tx[i];

		rx_byte = writeReadBlocking(tx_byte);

		if (rx) rx[i] = rx_byte;
	}

//	finished = true;
	return true;
}

bool
xpcc::stm32::UartSpiSimpleMaster{{ id }}::isFinished()
{
	return true;
}
