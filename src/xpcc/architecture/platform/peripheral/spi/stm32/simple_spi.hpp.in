// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_SIMPLE_SPI{{ id }}_HPP
#define XPCC_STM32_SIMPLE_SPI{{ id }}_HPP

#include <xpcc/architecture/peripheral/spi.hpp>
#include "spi_hal_{{ id }}.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * @brief		Serial peripheral interface (SPI{{ id }})
 * 
 * Simple unbuffered implementation.
 * @ingroup		stm32
 */
class SpiSimpleMaster{{ id }} : public xpcc::SpiSimpleMaster
{
public:
	static const TypeId::SpiMaster{{ id }}Sck  Sck;
	static const TypeId::SpiMaster{{ id }}Miso Miso;
	static const TypeId::SpiMaster{{ id }}Mosi Mosi;

	enum class
	DataMode : uint32_t
	{
		Mode0 = 0b00,			///< clock normal,   sample on rising  edge
		Mode1 = SPI_CR1_CPHA,	///< clock normal,   sample on falling edge
		Mode2 = SPI_CR1_CPOL,	///< clock inverted, sample on falling  edge
		Mode3 = SPI_CR1_CPOL | SPI_CR1_CPHA,
		///< clock inverted, sample on rising edge
	};

public:
	template< class clockSource, uint32_t baudrate >
	static void
	initialize()
	{
		// FIXME: add code to generate correct prescaler
		SpiHal{{ id }}::initialize(SpiBase::Prescaler::Div2);
		finished = true;
	}

	static void
	setDataMode(DataMode mode);

	static void
	setDataOrder(DataOrder order);

	static uint8_t
	writeReadBlocking(uint8_t data);

	static void
	writeBlocking(uint8_t data);

	static bool
	write(uint8_t data);

	static uint8_t
	getResult();

	static bool
	transfer(uint8_t * tx, uint8_t * rx, std::size_t length);

	static bool
	isFinished();

private:
	static bool finished;
};

} // namespace stm32

} // namespace xpcc

#include "simple_spi{{id}}_impl.hpp"

#endif // XPCC_STM32_SIMPLE_SPI{{ id }}_HPP
