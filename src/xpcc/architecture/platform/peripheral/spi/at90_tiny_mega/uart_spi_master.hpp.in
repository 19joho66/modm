// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_{{target.family | upper}}__UART_SPI{{id}}_HPP
#define XPCC_{{target.family | upper}}__UART_SPI{{id}}_HPP

#include "../../../device.hpp"
#include "../../../drivers.hpp"
#include "../../uart/at90_tiny_mega/uart_defines.h"
#include <xpcc/architecture/peripheral/spi.hpp>

namespace xpcc
{
	namespace {{target.family}}
	{
		struct Spi{{id}}
		{
%% for gpio in gpios
			typedef ::xpcc::{{target.family}}::Gpio{{ gpio.port }}{{ gpio.id }} {{ gpio.name | capitalize }};
%% endfor
		};
		
		/**
		 * \brief		Uart in Spi Master mode
		 *
		 * The fast SPI clock speeds make it unreasonable to use an interrupt
		 * based approach to shifting out each byte of the data, since the interrupt
		 * handling might decrease performance over busy waiting especially for
		 * targets operating at low CPU frequencies.
		 *
		 * Therefore the asynchronous methods are implemented synchronously.
		 *
		 * \ingroup		{{target.family}}
		 * \author		Niklas Hauser
		 */
		class UartSpiMaster{{id}} : public ::xpcc::SpiMaster, Spi{{id}}
		{
		public:
			/**
			 * \brief	Initialize SPI module
			 * 
			 * This also sets the directions of the I/O pins.
			 */
			static void
			initialize(uint16_t baudrate, Mode mode=Mode::Mode0)
			{
				UBRR{{ id }} = 0;
%% for io in gpios
	%% if io.name == 'sck'
				Sck::setOutput();
	%% endif
%% endfor
				// set MSPI mode of operation and SPI data mode
				UCSR{{ id }}C = (1 << UMSEL{{id}}1) | (1 << UMSEL{{id}}0);
				if (static_cast<uint8_t>(mode) & 0b01) UCSR{{ id }}C |= (1 << UCPHA{{id}});
				if (static_cast<uint8_t>(mode) & 0b10) UCSR{{ id }}C |= (1 << UCPOL{{id}});
				// enable receiver and transmitter
				UCSR{{ id }}B = (1 << RXEN{{id}}) | (1 << TXEN{{id}});
				// set baudrate _after_ enabling transmitter
				UBRR{{ id }} = (F_CPU / ( 2 * baudrate )) - 1;
			}

			static ALWAYS_INLINE uint8_t
			writeReadBlocking(uint8_t data)
			{
				UDR{{id}} = data;

				while(!isFinished())
					;
				return getResult();
			}

			static ALWAYS_INLINE void
			writeBlocking(uint8_t data)
			{
				UDR{{id}} = data;

				while(!isFinished())
					;
			}

			static ALWAYS_INLINE bool
			write(uint8_t data)
			{
				if (!isFinished())
					return false;

				UDR{{id}} = data;
				return true;
			}

			static ALWAYS_INLINE uint8_t
			getResult()
			{
				uint8_t data = UDR{{id}};
				return data;
			}

			static ALWAYS_INLINE bool
			isFinished()
			{
				return ( (UCSR{{id}}A & ((1 << UDRE{{id}}) | (1 << RXC{{id}})) ) == ((1 << UDRE{{id}}) | (1 << RXC{{id}})) );
			}
		};

		/**
		 * \brief		Spi Block Master without DMA support
		 *
		 * Since the AVR architecture of the AT90, ATtiny and ATmega does not support any form of DMA,
		 * these methods are implemented as blocking using busy waiting.
		 *
		 * \ingroup		{{target.family}}
		 * \author		Niklas Hauser
		 */
		class UartSpiBlockMaster{{id}} : public ::xpcc::SpiBlockMaster, Spi{{id}}
		{
		public:
			/**
			 * \brief	Initialize SPI module
			 *
			 * This also sets the directions of the I/O pins.
			 */
			static ALWAYS_INLINE void
			initialize(uint16_t clock, Mode mode=Mode::Mode0)
			{
				UartSpiMaster{{id}}::initialize(clock, mode);
				finished = true;
			}

			static inline bool
			start(uint8_t * tx, uint8_t * rx, std::size_t length, BufferOptions options=BufferOptions::TxRxIncrement)
			{
				if (!isFinished())
					return false;

				finished = false;

				uint8_t tx_byte = 0xff;
				uint8_t rx_byte;

				for (std::size_t i = 0; i < length; i++)
				{
					if (tx) tx_byte = tx[static_cast<uint8_t>(options) & 0b10 ? i : length-i-1];

					rx_byte = UartSpiMaster{{id}}::writeReadBlocking(tx_byte);

					if (rx) rx[static_cast<uint8_t>(options) & 0b01 ? i : length-i-1] = rx_byte;
				}

				finished = true;
				return true;
			}

			static ALWAYS_INLINE bool
			isFinished()
			{
				return finished;
			}
			
		private:
			static bool finished;
		};
	}
}

#endif
