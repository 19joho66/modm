// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_{{target.family | upper}}_SIMPLE_UART_SPI{{id}}_HPP
#	error	"Don't include this file directly, use 'uart_simple_spi.hpp' instead!"
#endif

// ----------------------------------------------------------------------------
template< uint32_t baudrate >
void
xpcc::{{target.family}}::UartSimpleSpi{{id}}::initialize(Mode mode)
{
	constexpr uint16_t prescaler = (F_CPU / ( 2 * baudrate )) - 1;
	static_assert(2 * baudrate <= F_CPU, "SPI baudrate is too high for CPU frequency.");
	static_assert(prescaler < (1 << 12), "SPI baudrate is too low for CPU frequency.");
	initialize(prescaler, mode);
}

void
xpcc::{{target.family}}::UartSimpleSpi{{id}}::initialize(uint16_t prescaler, Mode mode)
{
	UBRR{{ id }} = 0;
	// set MSPI mode of operation and SPI data mode
	UCSR{{ id }}C = (1 << UMSEL{{id}}1) | (1 << UMSEL{{id}}0);
	if (static_cast<uint8_t>(mode) & 0b01) UCSR{{ id }}C |= (1 << UCPHA{{id}});
	if (static_cast<uint8_t>(mode) & 0b10) UCSR{{ id }}C |= (1 << UCPOL{{id}});
	// enable receiver and transmitter
	UCSR{{ id }}B = (1 << RXEN{{id}}) | (1 << TXEN{{id}});
	// set baudrate _after_ enabling transmitter
	UBRR{{ id }} = prescaler;
}

uint8_t
xpcc::{{target.family}}::UartSimpleSpi{{id}}::writeReadBlocking(uint8_t data)
{
	writeBlocking(data);

	while(!isFinished())
		;
	return getResult();
}

void
xpcc::{{target.family}}::UartSimpleSpi{{id}}::writeBlocking(uint8_t data)
{
	while(!isFinished())
		;
	UDR{{id}} = data;
}

bool
xpcc::{{target.family}}::UartSimpleSpi{{id}}::write(uint8_t data)
{
	if (!isFinished())
		return false;

	UDR{{id}} = data;
	return true;
}

uint8_t
xpcc::{{target.family}}::UartSimpleSpi{{id}}::getResult()
{
	uint8_t data = UDR{{id}};
	return data;
}

bool
xpcc::{{target.family}}::UartSimpleSpi{{id}}::transfer(uint8_t *tx, uint8_t *rx,
		std::size_t length, BufferOptions options)
{
	if (!isFinished())
		return false;

	finished = false;

	uint8_t tx_byte = 0xff;
	uint8_t rx_byte;

	for (std::size_t i = 0; i < length; i++)
	{
		if (tx) tx_byte = tx[static_cast<uint8_t>(options) & 0b10 ? i : length-i-1];

		rx_byte = writeReadBlocking(tx_byte);

		if (rx) rx[static_cast<uint8_t>(options) & 0b01 ? i : length-i-1] = rx_byte;
	}

	finished = true;
	return true;
}

bool
xpcc::{{target.family}}::UartSimpleSpi{{id}}::isFinished()
{
	return ( (UCSR{{id}}A & ((1 << UDRE{{id}}) | (1 << RXC{{id}})) ) ==
			((1 << UDRE{{id}}) | (1 << RXC{{id}})) ) && finished;
}
