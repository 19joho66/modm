// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_{{target.family | upper}}_SIMPLE_SPI_HPP
#	error	"Don't include this file directly, use 'simple_spi.hpp' instead!"
#endif

// ----------------------------------------------------------------------------
template< class clockSource, uint32_t baudrate, xpcc::Tolerance tolerance >
void
xpcc::{{target.family}}::SpiSimpleMaster::initialize()
{
	static_assert(clockSource::Spi/2 >= baudrate,
			"The CPU frequency must be at least 2x higher than SPI baudrate.");
	static_assert(clockSource::Spi/128 <= baudrate,
			"The SPI baudrate must be at most 128x lower than CPU frequency.");

	constexpr uint16_t pre_raw = (clockSource::Spi / baudrate);
	// check if within baudrate tolerance
	constexpr uint32_t generated_baudrate = clockSource::Spi / pre_raw;
	constexpr uint32_t error = baudrate - generated_baudrate;
	static_assert(error <= baudrate * (static_cast<float>(tolerance) / 100),
			"The generated SPI baudrate is outside of specified tolerance.");
	
	// constexpr has some limitations, this is a compact if else tree
	constexpr Prescaler prescaler = (
			(pre_raw >= 128) ? Prescaler::Div128 : (
			(pre_raw >=  64) ? Prescaler::Div64  : (
			(pre_raw >=  32) ? Prescaler::Div32  : (
			(pre_raw >=  16) ? Prescaler::Div16  : (
			(pre_raw >=   8) ? Prescaler::Div8   : (
			(pre_raw >=   4) ? Prescaler::Div4   : Prescaler::Div2
			))))));

	initialize(prescaler);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::initialize(Prescaler prescaler)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (static_cast<uint8_t>(prescaler) & ~0x80);
	SPSR = (static_cast<uint8_t>(prescaler) & 0x80) ? (1 << SPI2X) : 0;
	finished = true;
}

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataMode(DataMode mode)
{
	SPCR = (SPCR & ~((1 << CPOL) | (1 << CPHA))) | static_cast<uint8_t>(mode);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataOrder(DataOrder order)
{
	if (order == DataOrder::LsbFirst) {
		SPCR |= (1 << DORD);
	} else {
		SPCR &= ~(1 << DORD);
	}
}
// ----------------------------------------------------------------------------

uint8_t
xpcc::{{target.family}}::SpiSimpleMaster::writeReadBlocking(uint8_t data)
{
	writeBlocking(data);

	uint8_t rData;
	while(!getResult(rData))
		;

	return rData;
}

void
xpcc::{{target.family}}::SpiSimpleMaster::writeBlocking(uint8_t data)
{
	while(!write(data))
		;
}

bool
xpcc::{{target.family}}::SpiSimpleMaster::write(uint8_t data)
{
	if (!isFinished())
		return false;

	SPDR = data;
	return true;
}

bool
xpcc::{{target.family}}::SpiSimpleMaster::getResult(uint8_t &data)
{
	if (!isFinished())
		return false;

	data = SPDR;
	return true;
}

bool
xpcc::{{target.family}}::SpiSimpleMaster::isFinished()
{
	return (SPSR & (1 << SPIF)) && finished;
}
