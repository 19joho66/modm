// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_{{target.family | upper}}_SIMPLE_SPI_HPP
#	error	"Don't include this file directly, use 'simple_spi.hpp' instead!"
#endif

uint8_t
xpcc::{{target.family}}::SpiSimpleMaster::state = 0;
// ----------------------------------------------------------------------------

template< class clockSource, uint32_t baudrate, uint16_t tolerance >
void
xpcc::{{target.family}}::SpiSimpleMaster::initialize()
{
	// calculate the nearest prescaler from the baudrate
	constexpr float pre_raw = (static_cast<float>(clockSource::Spi) / baudrate);
	constexpr uint16_t pre = (
			(pre_raw >= ( 64 * 4.f/3)) ? 128 : (
			(pre_raw >= ( 32 * 4.f/3)) ?  64 : (
			(pre_raw >= ( 16 * 4.f/3)) ?  32 : (
			(pre_raw >= (  8 * 4.f/3)) ?  16 : (
			(pre_raw >= (  4 * 4.f/3)) ?   8 : (
			(pre_raw >= (  2 * 4.f/3)) ?   4 :
										   2
			))))));

	// check if we found a prescaler which generates a baudrate within the tolerance
	assertBaudrateInTolerance<
			clockSource::Spi / pre,
			baudrate,
			tolerance >();

	// translate the prescaler into the bitmapping
	constexpr Prescaler prescaler = (
			(pre >= 128) ? Prescaler::Div128 : (
			(pre >=  64) ? Prescaler::Div64  : (
			(pre >=  32) ? Prescaler::Div32  : (
			(pre >=  16) ? Prescaler::Div16  : (
			(pre >=   8) ? Prescaler::Div8   : (
			(pre >=   4) ? Prescaler::Div4   :
						   Prescaler::Div2
			))))));

	initialize(prescaler);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::initialize(Prescaler prescaler)
{
	SPCR = (1 << SPE) | (1 << MSTR) | (static_cast<uint8_t>(prescaler) & ~0x80);
	SPSR = (static_cast<uint8_t>(prescaler) & 0x80) ? (1 << SPI2X) : 0;
	state = 0;
	index = 0;
}
// ----------------------------------------------------------------------------

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataMode(DataMode mode)
{
	SPCR = (SPCR & ~((1 << CPOL) | (1 << CPHA))) | static_cast<uint8_t>(mode);
}

void
xpcc::{{target.family}}::SpiSimpleMaster::setDataOrder(DataOrder order)
{
	if (order == DataOrder::LsbFirst) {
		SPCR |= (1 << DORD);
	} else {
		SPCR &= ~(1 << DORD);
	}
}
// ----------------------------------------------------------------------------

uint8_t
xpcc::{{target.family}}::SpiSimpleMaster::writeReadBlocking(uint8_t data)
{
	while (!(SPSR & (1 << SPIF)))
		;
	SPDR = data;

	while (!(SPSR & (1 << SPIF)))
		;
	data = SPDR;

	return data;
}

xpcc::co::Result<uint8_t>
xpcc::{{target.family}}::SpiSimpleMaster::writeRead(uint8_t data)
{
	// this is a manually implemented "fast coroutine"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (LSB of state):
	//   1. waiting to start, and
	//   2. waiting to finish.

	// always wait for any transfers to finish
	if (!(SPSR & (1 << SPIF)))
		return {xpcc::co::Running, 0};

	// LSB == 0 ?
	if ( !(state & 0x01) )
	{
		// start transfer by copying data into register
		SPDR = data;

		// set LSB = 1
		state |= 1;
		return {xpcc::co::Running, 0};
		// this then waits above for transfer to finish
	}

	// transfer finished
	state &= ~0x01;
	return {xpcc::co::Stop, SPDR};
}

void
xpcc::{{target.family}}::SpiSimpleMaster::transferBlocking(
		uint8_t *tx, uint8_t *rx, std::size_t length)
{
	uint8_t tx_byte = 0xff;
	uint8_t rx_byte;

	for (std::size_t i = 0; i < length; i++)
	{
		if (tx) tx_byte = tx[i];

		rx_byte = writeReadBlocking(tx_byte);

		if (rx) rx[i] = rx_byte;
	}
}

xpcc::co::Result<void>
xpcc::{{target.family}}::SpiSimpleMaster::transfer(
		uint8_t *tx, uint8_t *rx, std::size_t length)
{
	// this is a manually implemented "fast coroutine"
	// there is no context or nesting protection, since we don't need it.
	// there are only two states encoded into 1 bit (0x02 of state):
	//   1. initialize index, and
	//   2. wait for 1-byte transfer to finish.

	// we need to globally remember which byte we are currently transferring
	static std::size_t index = 0;

	// we need to allocate this on the stack
	uint8_t tx_byte = 0xff;

	// we are only interested in 0x02
	switch(state >> 1)
	{
		case 0:
			// we will only visit this state once
			state |= (1 << 1);

			// initialize index and check range
			index = 0;
			while (index < length)
			{

		case 1:
				// if tx == 0, we use a dummy byte 0xff
				if (tx) tx_byte = tx[index];
		{
				// call the coroutine
				xpcc::co::Result<uint8_t> result = writeRead(tx_byte);

				// if the coroutine is still running, so are we
				if (result.state > xpcc::co::NestingError)
					return {xpcc::co::Running, 0};

				// if rx != 0, we copy the result into the array
				if (rx) rx[index] = result.result;
		}
				index++;
			}

			// clear the state
			state &= 0x01;
			return {xpcc::co::Stop, 0};

		default:
			return {xpcc::co::WrongState, 0};
	}
}
