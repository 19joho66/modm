// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include <xpcc_config.hpp>
#include "timer_{{ id }}.hpp"

void
xpcc::stm32::Timer{{ id }}::enable()
{
	// enable clock
	RCC->APB1ENR  |=  RCC_APB1ENR_TIM{{ id }}EN;
	// reset timer
	RCC->APB1RSTR |=  RCC_APB1RSTR_TIM{{ id }}RST;
	RCC->APB1RSTR &= ~RCC_APB1RSTR_TIM{{ id }}RST;
}

void
xpcc::stm32::Timer{{ id }}::disable()
{
	// disable clock
	RCC->APB1ENR &= ~RCC_APB1ENR_TIM{{ id }}EN;

	TIM{{ id }}->CR1 = 0;
	TIM{{ id }}->DIER = 0;
}

void
xpcc::stm32::Timer{{ id }}::setMode(Mode mode)
{
	// ARR Register is buffered, only Under/Overflow generates update interrupt
	TIM{{ id }}->CR1 = TIM_CR1_ARPE | TIM_CR1_URS | static_cast<uint32_t>(mode);
	TIM{{ id }}->CR2 = 0;
}

uint16_t
xpcc::stm32::Timer{{ id }}::setPeriod(uint32_t microseconds, bool autoApply)
{
	// This will be inaccurate for non-smooth frequencies (last six digits
	// unequal to zero)
%% if target is stm32f2
#warning "Check if these values are correct!"
	uint32_t cycles = microseconds * 60;	// APB1 clock * 2 in MHz = 30 * 2 = 60
%% elif target is stm32f4
	uint32_t cycles = microseconds * 84;	// APB1 clock * 2 in MHz = 42 * 2 = 84
%% elif target is stm32f1
	uint32_t cycles = microseconds * (
		((STM32_APB1_FREQUENCY == STM32_AHB_FREQUENCY) ? 1 : 2) * 
			STM32_APB1_FREQUENCY / 1000000UL);
%% endif

	uint16_t prescaler = (cycles + 65535) / 65536;	// always round up
	uint16_t overflow = cycles / prescaler;

	overflow = overflow - 1;	// e.g. 36000 cycles are from 0 to 35999
	setPrescaler(prescaler);
	setOverflow(overflow);

	if (autoApply) {
		// Generate Update Event to apply the new settings for ARR
		TIM{{ id }}->EGR |= TIM_EGR_UG;
	}

	return overflow;
}

%% if id == 6 and target is stm32f2 or target is stm32f3 or target is stm32f4
	%% set interrupt_vector = "TIM6_DAC_IRQn"
%% else
	%% set interrupt_vector = "TIM" ~ id ~ "_IRQn"
%% endif
void
xpcc::stm32::Timer{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set vector priority
		NVIC_SetPriority({{ interrupt_vector }}, priority);
		// register IRQ at the NVIC
		NVIC_EnableIRQ({{ interrupt_vector }});
	}
	else {
		NVIC_DisableIRQ({{ interrupt_vector }});
	}
}
