// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_TIMER_{{ id }}_HPP
#define XPCC_STM32_TIMER_{{ id }}_HPP

#include "../../../type_ids.hpp"
#include "basic_base.hpp"

namespace xpcc
{
	namespace stm32
	{
		/**
		 * @brief		Basic Timer {{ id }}
		 * 
		 * Interrupt handler:
		 * \code
		 * extern "C" void
		 * TIM{{ id }}_IRQHandler(void)
		 * {
		 *     Timer{{ id }}::resetInterruptFlags(Timer{{ id }}::FLAG_UPDATE);
		 *     
		 *     ...
		 * }
		 * \endcode
		 * 
		 {% if id == 6 -%}
		 * For the STM32F2xx and STM32F4xx:
		 * \code
		 * extern "C" void
		 * TIM{{ id }}_DAC_IRQHandler(void)
		 * {
		 *     Timer{{ id }}::resetInterruptFlags(Timer{{ id }}::FLAG_UPDATE);
		 *     
		 *     ...
		 * }
		 * \endcode
		 {%- endif %}
		 * 
		 * @author		Fabian Greif
		 * @ingroup		stm32
		 */
		class Timer{{ id }} : public BasicTimer
		{
		public:
			static void
			enable();
			
			static void
			disable();
			
			static inline void
			pause()
			{
				TIM{{ id }}->CR1 &= ~TIM_CR1_CEN;
			}
			
			static inline void
			start()
			{
				TIM{{ id }}->CR1 |= TIM_CR1_CEN;
			}
			
			static void
			setMode(Mode mode);
			
			static inline void
			setPrescaler(uint16_t prescaler)
			{
				// Because a prescaler of zero is not possible the actual
				// prescaler value is \p prescaler - 1 (see Datasheet)
				TIM{{ id }}->PSC = prescaler - 1;
			}
			
			static inline void
			setOverflow(uint16_t overflow)
			{
				TIM{{ id }}->ARR = overflow;
			}
			
			static uint16_t
			setPeriod(uint32_t microseconds, bool autoApply = true);
			
			static inline void
			applyAndReset()
			{
				// Generate Update Event to apply the new settings for ARR
				TIM{{ id }}->EGR |= TIM_EGR_UG;
			}
			
			static inline uint16_t
			getValue()
			{
				return TIM{{ id }}->CNT;
			}
			
			static inline void
			setValue(uint16_t value)
			{
				TIM{{ id }}->CNT = value;
			}
			
			static void
			enableInterruptVector(bool enable, uint32_t priority);
			
			static inline void
			enableInterrupt(Interrupt interrupt)
			{
				TIM{{ id }}->DIER |= interrupt;
			}
			
			static inline void
			disableInterrupt(Interrupt interrupt)
			{
				TIM{{ id }}->DIER &= ~interrupt;
			}
			
			static inline InterruptFlag
			getInterruptFlags()
			{
				return static_cast<InterruptFlag>(TIM{{ id }}->SR);
			}
			
			static void
			acknowledgeInterruptFlag(InterruptFlag interrupt)
			{
				// Flags are cleared by writing a zero to the flag position.
				// Writing a one is ignored.
				TIM{{ id }}->SR = ~interrupt;
			}
		};
	}
}

#endif // XPCC_STM32_TIMER_{{ id }}_HPP
