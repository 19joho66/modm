// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC__ATMEGA_GPIO_HPP
#define XPCC__ATMEGA_GPIO_HPP

#include <xpcc/architecture/driver/gpio.hpp>
#include <xpcc/math/utils/bit_operation.hpp>
#include "../../../device.hpp"


/**
 * Macros for backwards compatibility:
 */

#define	GPIO__IO(name, port, pin) \
typedef CONCAT3(::xpcc::atmega::Gpio, port, pin) name

#define	GPIO__OUTPUT(name, port, pin) \
typedef CONCAT3(::xpcc::atmega::GpioOutput, port, pin) name

#define	GPIO__INPUT(name, port, pin) \
typedef CONCAT3(::xpcc::atmega::GpioInput, port, pin) name

#define	GPIO__NIBBLE_LOW(name, port) \
typedef CONCAT(::xpcc::atmega::GpioLowNibble, port) name

#define	GPIO__NIBBLE_HIGH(name, port) \
typedef CONCAT(::xpcc::atmega::GpioHighNibble, port) name

#define	GPIO__PORT(name, port) \
typedef CONCAT(::xpcc::atmega::GpioPort, port) name


namespace xpcc
{
	namespace atmega
	{
		struct Gpio
		{
			/**
			 * \ingroup	atmega
			 */
			enum PullType
			{
				FLOATING,
				PULLUP,
			};
			
			/**
			 * \ingroup	atmega
			 */
			enum TriggerType
			{
				LOW_LEVEL = 0x0,
				ANY_CHANGE = 0x1,
				FALLING_EDGE = 0x2,
				RISING_EDGE = 0x3,
			};
		};

		/**
		 * Gpio OpenDrain template, which remaps the behavior of the Gpio pin to
		 * simulate an open-drain Output.
		 * This maps set() -> setOutput() and reset() -> setInput(PullType::PULLUP)
		 */
		template< class IO >
		struct GpioOpenDrain : Gpio
		{
			ALWAYS_INLINE static void set() {
				IO::setInput(PullType::PULLUP);
			}
			ALWAYS_INLINE static void reset() {
				IO::setOutput(::xpcc::gpio::LOW);
			}
			ALWAYS_INLINE static void set(bool status) {
				if (status) { set(); }
				else { reset(); }
			}
			ALWAYS_INLINE static bool read() {
				return IO::read();
			}
		};

		/**
		 * Gpio Classes created from the XML Device File Gpio Description
		 */
		%% for gpio in gpios
			%% set port = gpio.port|upper
			%% set pin  = gpio.id
			
		%% for type in ["Output", "Input", ""]
			%% set name = "Gpio" ~ type ~ port ~ pin
		
		struct {{name}} : Gpio
		{
			%% if type == "" or type == "Output"
			ALWAYS_INLINE static void setOutput(bool status) {
				set(status);
				setOutput();
			}

			ALWAYS_INLINE static void setOutput() {
				DDR{{port}} |= (1 << {{pin}});
			}

			ALWAYS_INLINE static void set() {
				PORT{{port}} |=  (1 << {{pin}});
			}
			
			ALWAYS_INLINE static void set(bool status) {
				if (status) { set(); }
				else { reset(); }
			}

			ALWAYS_INLINE static void reset() {
				PORT{{port}} &= ~(1 << {{pin}});
			}

			ALWAYS_INLINE static void toggle() {
				PORT{{port}} ^=  (1 << {{pin}});
			}
			%% endif
			%% if type == "" or type == "Input"
			ALWAYS_INLINE static void setInput() {
				DDR{{port}} &= ~(1 << {{pin}});
			}

			ALWAYS_INLINE static void
			setInput(PullType type) {
				setInput();
				if (type == PullType::PULLUP) {
					PORT{{port}} |= (1 << {{pin}});
				}
				else {
					PORT{{port}} &= ~(1 << {{pin}});
				}
			}

			ALWAYS_INLINE static bool read() {
				return (PIN{{port}} & (1 << {{pin}}));
			}
			%% for af in gpio.afs

			%% if af.type == "extint"
			ALWAYS_INLINE static void enableExternalInterrupt(TriggerType trigger) {
				EICRA |= (trigger << 2*{{af.id}});
				EIMSK |= (1 << {{af.id}});
			}

			ALWAYS_INLINE static void disableExternalInterrupt() {
				EICRA &= ~(0x3 << 2*{{af.id}});
				EIMSK &= ~(1 << {{af.id}});
			}

			ALWAYS_INLINE static bool getExternalInterruptFlag() {
				return (EIFR & (1 << {{af.id}}));
			}

			ALWAYS_INLINE static void acknowledgeExternalInterruptFlag() {
				EIFR |= (1 << {{af.id}});
			}
			%% endif

			%% if af.type == "pcint"
			ALWAYS_INLINE static void enablePCInterrupt() {
				%% if port == "B"
				PCMSK0 |= (1 << {{pin}});
				PCICR  |= (1 << PCIE0);
				%% elif port == "C"
				PCMSK1 |= (1 << {{pin}});
				PCICR  |= (1 << PCIE1);
				%% elif port == "D"
				PCMSK2 |= (1 << {{pin}});
				PCICR  |= (1 << PCIE2);
				%% endif
			}

			ALWAYS_INLINE static void disablePCInterrupt() {
				%% if port == "B"
				PCMSK0 &= ~(1 << {{pin}});
				if (!PCMSK0) PCICR &= ~(1 << PCIE0);
				%% elif port == "C"
				PCMSK1 &= ~(1 << {{pin}});
				if (!PCMSK1) PCICR &= ~(1 << PCIE1);
				%% elif port == "D"
				PCMSK2 &= ~(1 << {{pin}});
				if (!PCMSK2) PCICR &= ~(1 << PCIE2);
				%% endif
			}

			ALWAYS_INLINE static bool getPCInterruptFlag() {
				%% if port == "B"
				return (PCIFR & (1 << PCIF0));
				%% elif port == "C"
				return (PCIFR & (1 << PCIF1));
				%% elif port == "D"
				return (PCIFR & (1 << PCIF2));
				%% endif
			}

			ALWAYS_INLINE static void acknowledgePCInterruptFlag() {
				%% if port == "B"
				PCIFR |= (1 << PCIF0);
				%% elif port == "C"
				PCIFR |= (1 << PCIF1);
				%% elif port == "D"
				PCIFR |= (1 << PCIF2);
				%% endif
			}

			%% endif

			%% endfor

			%% endif
		};

		%% endfor
		%% endfor

		%% for nibble in nibbles
			%% set port = nibble.port|upper

			%% for id in nibble.position

		%% if id == 0
		struct GpioLowNibble{{port}}
		{
			ALWAYS_INLINE static void setOutput() {
				DDR{{port}} |= 0x0f;
			}
			ALWAYS_INLINE static void setInput() {
				DDR{{port}} &= ~0x0f;
			}
			ALWAYS_INLINE static uint8_t read() {
				return (PIN{{port}} & 0x0f);
			}
			ALWAYS_INLINE static void write(uint8_t data) {
				PORT{{port}} = (data & 0x0f) | (PORT{{port}} & 0xf0);
			}
		};
		%% elif id == 1
		struct GpioHighNibble{{port}}
		{
			ALWAYS_INLINE static void setOutput() {
				DDR{{port}} |= 0xf0;
			}
			ALWAYS_INLINE static void setInput() {
				DDR{{port}} &= ~0xf0;
			}
			ALWAYS_INLINE static uint8_t read() {
				uint8_t data = PIN{{port}};
				return (data >> 4);
			}
			ALWAYS_INLINE static void write(uint8_t data) {
				data <<= 4;
				PORT{{port}} = data | (PORT{{port}} & 0x0f);
			}
		};
		%% endif

		%% endfor
		%% endfor

		%% for octet in octets
			%% set port = octet.port|upper

			%% for id in octet.position

		%% if id == 0
		struct GpioPort{{port}}
		{
			ALWAYS_INLINE static void setOutput() {
				DDR{{port}} = 0xff;
			}
			ALWAYS_INLINE static void setInput() {
				DDR{{port}} = 0;
			}
			ALWAYS_INLINE static uint8_t read() {
				return PIN{{port}};
			}
			ALWAYS_INLINE static void write(uint8_t data) {
				PORT{{port}} = data;
			}
		};
		%% endif

		%% endfor
		%% endfor
	}
}


#endif // XPCC_STM32__GPIO_HPP
