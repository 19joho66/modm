// coding: utf-8
/* Copyright (c) 2009, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}

#ifndef XPCC_{{target.family | upper}}__UART{{ id }}_HPP
#define XPCC_{{target.family | upper}}__UART{{ id }}_HPP

#include "../../../device.hpp"
#include "../../../drivers.hpp"
#include "../../../type_ids.hpp"
#include <xpcc/architecture/peripheral/uart.hpp>

namespace xpcc
{

namespace {{target.family}}
{

/**
 * 	(Non-)Buffered Uart{{ id }}
 * 
 * This implementation uses a ringbuffer. The size of the ringbuffer
 * can be changed in the @c project.cfg file.
 * 
 * Just add add a value for `Uart{{ id }}.tx_buffer` and/or 
 * `Uart{{ id }}.rx_buffer` in the `defines` section. The size can
 * be any value between 1 and 254 for buffered and 0 for
 * non-buffered operation.
 * 
 * Example:
 * @code
 * [defines]
 * Uart{{ id }}.tx_buffer = 20
 * Uart{{ id }}.rx_buffer = 30
 * @endcode
 * 
 * @author	Fabian Greif
 * @author	Niklas Hauser
 * @ingroup		{{target.family}}
 */
class Uart{{ id }} : public ::xpcc::Uart
{
public:
	
	%% for gpio in gpios
	%% if gpio.instance | int == id | int
	typedef ::xpcc::{{target.family}}::Gpio{{ gpio.port }}{{ gpio.id }} {{ gpio.name | capitalize }};
	%% endif
	%% endfor
	typedef ::xpcc::{{target.family}}::TypeId::Uart{{ id }} Id;
	
public:
	/**
	 * Sets the baudrate.
	 *
	 * This function is called with a constant value as template parameter
	 * so all the calculation is done by the compiler.
	 *
	 * @tparam	baudrate	desired baud rate
	 */
	template< uint32_t baudrate >
	static ALWAYS_INLINE void
	initialize()
	{
		static_assert(baudrate * 8l <= F_CPU, "Uart baudrate is too high for CPU frequency.");
		
		uint16_t ubrr;
		// use double speed when necessary
		if (baudrate * 16l > F_CPU)
		{
			ubrr = (F_CPU / (baudrate * 8l)) - 1;
			ubrr |= 0x8000;
		}
		else {
			ubrr = (F_CPU / (baudrate * 16l)) - 1;
		}
		setBaudrateRegister(ubrr);
	}
	
	// start documentation inherited
	// MARK: write blocking
	static void
	writeBlocking(uint8_t data);
	
	static void
	writeBlocking(const uint8_t *data, std::size_t length);
	
	static void
	flushWriteBuffer();
	
	// MARK: write
	static bool
	write(uint8_t data);
	
	static std::size_t
	write(const uint8_t *data, std::size_t length);
	
	static bool
	isWriteFinished();
	
	// MARK: read
	static bool
	read(uint8_t& data);
	
	static std::size_t
	read(uint8_t *buffer, std::size_t length);
	
	// MARK: discard
	static std::size_t
	discardReceiveBuffer();
	
	static std::size_t
	discardTransmitBuffer();
	// end documentation inherited
	
	// MARK: error
	/**
	 * Check whether any errors occurred during receiving.
	 * Be aware that these indicate an error that occurred somewhere
	 * since resetting the Error Flags (with `resetErrorFlags()`), so
	 * you cannot tell which byte had the error.
	 *
	 * @return	`0` if no errors occurred, otherwise a value that
	 *			corresponds to the Error Flags in register A.
	 */
	static uint8_t
	getErrorFlags();
	
	static void
	acknowledgeErrorFlags();
	
protected:
	static void
	setBaudrateRegister(uint16_t ubrr);
};

} // namespace {{target.family}}

} // namespace xpcc

#endif // XPCC_{{target.family | upper}}__UART{{ id }}_HPP
