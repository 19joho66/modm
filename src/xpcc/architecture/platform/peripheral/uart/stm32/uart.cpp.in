// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------
%% if id in [1, 2, 3, 6]
%%	set uart = "Usart"
%% elif id in [4, 5]
%%	set uart = "Uart"
%% endif
%#
%% set name = uart ~ id
%% set hal = uart ~ "Hal" ~ id

#include "../../../device.hpp"
#include "{{ uart | lower }}_hal_{{ id }}.hpp"
#include "{{ uart | lower }}_{{ id }}.hpp"

void
xpcc::stm32::{{ name }}::initialize(uint32_t baudrate, Parity parity)
{
	{{ hal }}::initialize(baudrate, parity);
	{{ hal }}::setTransmitterEnable(true);
	{{ hal }}::setReceiverEnable(true);
}

void
xpcc::stm32::{{ name }}::writeBlocking(uint8_t data)
{
	while(!{{ hal }}::isTransmitRegisterEmpty());
	{{ hal }}::write(data);
}

void
xpcc::stm32::{{ name }}::writeBlocking(const uint8_t *data, std::size_t n)
{
	while (n-- != 0) {
		writeBlocking(*data++);
	}
}

bool
xpcc::stm32::{{ name }}::read(uint8_t &data)
{
	if({{ hal }}::isReceiveRegisterNotEmpty()) {
		data = {{ hal }}::read();
		return true;
	} else {
		return false;
	}
}

std::size_t
xpcc::stm32::{{ name }}::read(uint8_t *data, std::size_t n)
{
	(void)n; // avoid compiler warning
	if(read(*data)) {
		return 1;
	} else {
		return 0;
	}
}

bool
xpcc::stm32::{{ name }}::write(uint8_t data)
{
	if({{ hal }}::isTransmitRegisterEmpty()) {
		{{ hal }}::write(data);
		return true;
	} else {
		return false;
	}
}

std::size_t
xpcc::stm32::{{ name }}::write(const uint8_t *data, std::size_t n)
{
	(void)n; // avoid compiler warning
	if(write(*data)) {
		return 1;
	} else {
		return 0;
	}
}

bool
xpcc::stm32::{{ name }}::isWriteFinished()
{
	return {{ hal }}::isTransmitRegisterEmpty();
}
