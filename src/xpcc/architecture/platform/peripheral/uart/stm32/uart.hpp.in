// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------
%% if id in [1, 2, 3, 6]
%%	set uart = "Usart"
%% elif id in [4, 5]
%%	set uart = "Uart"
%% endif
%% set hal = uart ~ "Hal" ~ id

#ifndef XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
#define XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP

#include <xpcc/architecture/peripheral/uart.hpp>
#include "../../../type_ids.hpp"
#include "uart_base.hpp"
#include "uart_baudrate.hpp"
#include "{{ uart | lower }}_hal_{{ id }}.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * Universal asynchronous receiver transmitter ({{ uart | upper ~ id }})
 *
 * @author		Kevin Laeufer
 * @author		Niklas Hauser
 * @ingroup		stm32
 */
class {{ uart ~ id }} : public UartBase, public ::xpcc::Uart
{
public:
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::Uart{{ id }}Rx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::Uart{{ id }}Tx Tx;

%% if parameters.buffered
private:
	/// Second stage initialize for buffered uart
	// that need to be implemented in the .cpp
	static void
	initializeBuffered(uint32_t interruptPriority);
%% endif

public:
template< 	class clockSource, uint32_t baudrate,
		uint16_t tolerance = xpcc::Tolerance::OnePercent >
	static void ALWAYS_INLINE
%% if parameters.buffered
	initialize(uint32_t interruptPriority, Parity parity = Parity::Disabled)
%% else
	initialize(Parity parity = Parity::Disabled)
%% endif
	{
		constexpr uint32_t clockrate = clockSource::{{ uart ~ id }};
		constexpr uint32_t scalar = (baudrate * 16l > clockrate) ? 8 : 16;
		constexpr uint32_t max = (scalar == 16) ? 65536 : 32768;

		// calculate the fractional prescaler value
		constexpr float pre_raw = static_cast<float>(clockrate) / (baudrate);
		// respect the prescaler range of 1 to 4096
		constexpr uint32_t pre_ceil = std::ceil(pre_raw) > max ? max : std::ceil(pre_raw);
		constexpr uint32_t pre_floor = std::floor(pre_raw) < 1 ? 1 : std::floor(pre_raw);

		// calculate the possible baudrates above and below the requested baudrate
		constexpr uint32_t baud_lower = clockrate / ( pre_ceil );
		constexpr uint32_t baud_upper = clockrate / ( pre_floor );

		// calculate the fractional prescaler value corresponding to the baudrate exactly
		// between the upper and lower baudrate
		constexpr float pre_middle = static_cast<float>(clockrate) /
				( ((baud_upper - baud_lower) / 2.f + baud_lower) );
		// decide which prescaler value is closer to a possible baudrate
		constexpr uint32_t prescaler = (pre_raw > pre_middle) ? pre_ceil : pre_floor;

		// check if within baudrate tolerance
		constexpr uint32_t generated_baudrate = clockrate / ( prescaler );
		assertBaudrateInTolerance<
				/* clostest available baudrate */ generated_baudrate,
				/* desired baudrate */ baudrate,
				tolerance >();

		// brr needs to be formatted right for scalar == 8
		constexpr uint16_t brr = (scalar == 16) ? prescaler :
				(((prescaler & ~0b111) << 1) | (prescaler & 0b111));
		// get the bitmasks for the scaler
		constexpr UartBase::OversamplingMode oversample = (scalar == 16) ?
				UartBase::OversamplingMode::By16 : UartBase::OversamplingMode::By8;

		{{ hal }}::initializeWithBrr(brr, parity, oversample);
%% if parameters.buffered
		initializeBuffered(interruptPriority);
%% endif
		{{ hal }}::setTransmitterEnable(true);
		{{ hal }}::setReceiverEnable(true);
	}

	static void
	writeBlocking(uint8_t data);

	static void
	writeBlocking(const uint8_t *data, std::size_t length);

	static void
	flushWriteBuffer();

	static bool
	write(uint8_t data);

	static std::size_t
	write(const uint8_t *data, std::size_t length);

	static bool
	isWriteFinished();

	static std::size_t
	discardTransmitBuffer();

	static bool
	read(uint8_t &data);

	static std::size_t
	read(uint8_t *buffer, std::size_t length);

	static std::size_t
	discardReceiveBuffer();
};

}	// stm32 namespace

}	// xpcc namespace

#endif // XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
