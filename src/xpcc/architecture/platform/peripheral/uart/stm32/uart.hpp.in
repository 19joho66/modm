// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part of the xpcc library and is released under the 3-clause BSD
* license. See the file `LICENSE` for the full license governing this code.
*/
// ----------------------------------------------------------------------------
%% if id in [1, 2, 3, 6]
%%	set uart = "Usart"
%% elif id in [4, 5]
%%	set uart = "Uart"
%% endif

#ifndef XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
#define XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP

#include <cstddef>	// for std::size_t
#include <stdint.h>
#include "../../../type_ids.hpp"
#include "uart_base.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * Universal asynchronous receiver transmitter ({{ uart | upper ~ id }})
 *
 * @author		Kevin Laeufer
 * @ingroup		stm32
 */
class {{ uart ~ id }} : public UartBase
{
public:

	/// TypeId used to connect GPIO pins to this peripheral.
	static const TypeId::{{ uart ~ "Hal" ~ id }} Id;

	static void
%% if parameters.buffered
	initialize(uint32_t baudrate, uint32_t interruptPriority,
				bool blocking = true, Parity parity = Parity::Disabled);
%% else
	initialize(uint32_t baudrate, Parity parity = Parity::Disabled);
%% endif

	static void
	writeBlocking(uint8_t data);

	static void
	writeBlocking(const uint8_t *data, std::size_t n);

	// asynchronous
	static bool
	read(uint8_t &data);

	static std::size_t
	read(uint8_t *data, std::size_t n);

	static bool
	write(uint8_t data);

	static std::size_t
	write(const uint8_t *data, std::size_t n);

	static bool
	isWriteFinished();
};

}
}

#endif // XPCC_STM32_{{ uart | upper }}_{{ id }}_HPP
