// coding: utf-8
/*
* Copyright (c) 2013, Roboterclub Aachen e.V.
* All Rights Reserved.
*
* The file is part for the xpcc library and is released under the
* 3-clause BSD license. See the file `LICENSE` for the full license
* governing this code.
*/
// ----------------------------------------------------------------------------
%% if id in [1, 2, 3, 6]
%%	set uart = "Usart"
%% elif id in [4, 5]
%%	set uart = "Uart"
%% endif

#ifndef XPCC_STM32_{{ uart | upper }}HAL_{{ id }}_HPP
#define XPCC_STM32_{{ uart | upper }}HAL_{{ id }}_HPP

#include <stdint.h>
#include "../../../type_ids.hpp"
#include "../../../device.hpp"
#include "uart_hal_base.hpp"

namespace xpcc
{
namespace stm32
{
/**
 * Universal asynchronous receiver transmitter ({{ uart ~ id }})
 *
 * Not available on the low- and medium density devices.
 *
 * Very basic implementation that exposes more hardware features than
 * the regular Usart classes.
 *
 * @author		Kevin Laeufer
 * @ingroup		stm32
 */
class {{ uart ~ "Hal" ~ id }} : public UartHalBase
{
private:	// This methods can only be executed while UART is
			// disabled.
			// At the moment this is only the case in the initialize
			// method.
%% if id in [1, 6]
	static constexpr uint32_t peripheralFrequency = STM32_APB2_FREQUENCY;
%% elif id in [2, 3, 4, 5]
	static constexpr uint32_t peripheralFrequency = STM32_APB1_FREQUENCY;
%% endif

	/**
	 * Set Baudrate
	 *
	 * Remember to enable the clock but not the UART peripheral
	 * before setting the baudrate.
	 */
	static inline void
	setBaudrate(uint32_t baudrate);
	/**
	 * Disable Parity or Enable Odd/Even Parity
	 *
	 * This method assumes 8 databits + 1 parity bit
	 * Remember to enable the clock but not the UART peripheral
	 * before setting the party.
	 */
	static inline void
	setParity(const Parity parity);

public:

	/// TypeId used to connect GPIO pins to this peripheral.
	static const TypeId::{{ uart ~ "Hal" ~ id }} Id;

	/// Enables the clock, resets the hardware and sets the UE bit
	static inline void
	enable();

	/// Disables the hw module (by disabling its clock line)
	static inline void
	disable();

	/**
	 * Initialize Uart HAL Peripheral
	 *
	 * Enables clocks, the UART peripheral (but neither TX nor RX)
	 * Sets baudrate and parity.
	 */
	static inline void
	initialize(uint32_t baudrate, Parity parity = Parity::Disabled);

	/**
	 * \brief	Write a single byte to the transmit register
	 *
	 * @warning 	This method does NOT do any sanity checks!!
	 *				It is your responsibility to check if the register
	 *				is empty!
	 */
	static inline void
	write(uint8_t data);

	/**
	 * Returns the value of the receive register
	 *
	 * @warning 	This method does NOT do any sanity checks!!
	 *				It is your responsibility to check if the register
	 *				contains something useful!
	 */
	static inline uint8_t
	read();

	/// Enable/Disable Transmitter
	static inline void
	setTransmitterEnable(const bool enable);

	/// Enable/Disable Receiver
	static inline void
	setReceiverEnable(bool enable);

	/// Returns true if data has been received
	static inline bool
	isReceiveRegisterNotEmpty();

	/// Returns true if data can be written
	static inline bool
	isTransmitRegisterEmpty();

	static void
	enableInterruptVector(bool enable, uint32_t priority);

	static inline void
	enableInterrupt(Interrupt interrupt);

	static inline void
	disableInterrupt(Interrupt interrupt);

	static inline InterruptFlag
	getInterruptFlags();

	/**
	 * Returns the value of the receive register
	 *
	 * @warning 	Not all InterruptFlags can be cleared this way.
	 */
	static inline void
	resetInterruptFlags(InterruptFlag flags);
};
}
}

#include "{{ uart | lower }}_hal_{{ id }}_impl.hpp"

#endif // XPCC_STM32_{{ uart | upper }}HAL_{{ id }}_HPP
