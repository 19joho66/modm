// coding: utf-8
// ----------------------------------------------------------------------------
/* Copyright (c) 2011, Roboterclub Aachen e.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Roboterclub Aachen e.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// ----------------------------------------------------------------------------
{{ generation_block }}
{% import 'template.cpp.macros' as template %}
#include "../gpio.hpp"
#include "../device.h"

#include "usart_{{ id }}.hpp"

#include <xpcc_config.hpp>
{% if id == 6 %}
#if defined(STM32F2XX) || defined(STM32F4XX)
{% endif %}
namespace
{
	{% if id == 1 -%}
	GPIO__OUTPUT(TxdA9, A, 9);
	GPIO__INPUT(RxdA10, A, 10);
	
	GPIO__OUTPUT(TxdB6, B, 6);
	GPIO__INPUT(RxdB7, B, 7);
	
	static const uint32_t apbClk = STM32_APB2_FREQUENCY;	// APB2
	{%- elif id == 2 -%}
	GPIO__OUTPUT(TxdA2, A, 2);
	GPIO__INPUT(RxdA3, A, 3);
	
	GPIO__OUTPUT(TxdD5, D, 5);
	GPIO__INPUT(RxdD6, D, 6);
	
	static const uint32_t apbClk = STM32_APB1_FREQUENCY;	// APB1
	{%- elif id == 3 -%}
	GPIO__OUTPUT(TxdB10, B, 10);
	GPIO__INPUT(RxdB11, B, 11);
	
	GPIO__OUTPUT(TxdD8, D, 8);
	GPIO__INPUT(RxdD9, D, 9);
	
	GPIO__OUTPUT(TxdC10, C, 10);
	GPIO__INPUT(RxdC11, C, 11);
	
	static const uint32_t apbClk = STM32_APB1_FREQUENCY;	// APB1
	{%- elif id == 6 -%}
	GPIO__OUTPUT(TxdC6, C, 6);
	GPIO__INPUT(RxdC7, C, 7);
	
	GPIO__OUTPUT(TxdG14, G, 14);
	GPIO__INPUT(RxdG9, G, 9);
	
	static const uint32_t apbClk = STM32_APB2_FREQUENCY;	// APB2
	{%- endif %}
}

// ----------------------------------------------------------------------------
{{ template.usartConfigurePins(id) }}

// ----------------------------------------------------------------------------
{{ template.usartSetBaudrate(id) }}

// ----------------------------------------------------------------------------
{{ template.write('Usart', id) }}

// ----------------------------------------------------------------------------
{{ template.writeBlock('Usart', id) }}

// ----------------------------------------------------------------------------
{{ template.read('Usart', id) }}

// ----------------------------------------------------------------------------
{{ template.readBlock('Usart', id) }}
{% if id == 6 %}
#endif
{% endif %}


