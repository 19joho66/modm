/*
 * Copyright (c) 2013-2016, Niklas Hauser
 * Copyright (c) 2016, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

{{ generation_block }}

#ifndef XPCC_{{target["family"] | upper}}_GPIO_HPP
#define XPCC_{{target["family"] | upper}}_GPIO_HPP

#include "../device.hpp"
#include "type_ids.hpp"
#include "gpio_define.h"
#include <xpcc/architecture/interface/gpio.hpp>
#include <xpcc/architecture/interface/i2c.hpp>
#include <xpcc/math/utils/bit_operation.hpp>

/**
 * @ingroup 	platform
 * @defgroup	{{target.string}}
 */

/**
 * @ingroup 	{{target.string}}
 * @defgroup	{{target.string}}_gpio GPIO
 */


namespace xpcc
{

namespace {{target["family"]}}
{

/// @ingroup	{{target.string}}_gpio
struct Gpio
{
	/// Each Input Pin can be configured in one of these states.
	enum class
	InputType : uint8_t
	{
		Floating,	///< The input pin is left floating
		PullUp,		///< The input pin is pulled to Vcc
	};

	/// Each External Interrupt can be configured to trigger on these conditions.
	enum class
	InputTrigger : uint8_t
	{
		LowLevel = 0b00,	///< triggers **continuously** during low level
		BothEdges = 0b01,	///< triggers on both rising and falling edge
		FallingEdge = 0b10,	///< triggers on falling edge
		RisingEdge = 0b11,	///< triggers on rising edge
	};

	/// Available ports on this device.
	enum class
	Port
	{
%% for port in gpios | getPorts
		{{ port.name | upper }},
%% endfor
	};

protected:
	/// @cond
	static constexpr uint8_t
	i(InputType config) { return static_cast<uint8_t>(config); }
	static constexpr uint8_t
	i(InputTrigger trigger) { return static_cast<uint8_t>(trigger); }
	/// @endcond
};

/**
 * Gpio OpenDrain template, which remaps the behavior of the Gpio pin to
 * simulate an open-drain output (with internal pullups if needed).
 * You must use this class for `SoftwareI2cMaster`!
 *
 * @see ::xpcc::SoftwareI2cMaster
 * @ingroup	{{target.string}}_gpio
 * @{
 */
%% for name in ['GpioOpenDrain', 'GpioOpenDrainWithPullUp']
template< class Pin >
class {{name}} : public Pin
{
	static_assert(Pin::direction == xpcc::Gpio::Direction::InOut, "Pin must inherit from xpcc::GpioIO");
public:
	static constexpr xpcc::Gpio::Direction direction = xpcc::Gpio::Direction::Out;

public:
	xpcc_always_inline static void configure(Gpio::InputType /*type*/) {}
	xpcc_always_inline static void setInput() {}
	xpcc_always_inline static void setInput(Gpio::InputType /*type*/) {}
	xpcc_always_inline static void setOutput() {}
	xpcc_always_inline static void setOutput(bool status) {
		set(status);
	}
	%% if name == 'GpioOpenDrain'
	/// maps to `setInput(InputType::Floating)`
	xpcc_always_inline static void set() {
		Pin::setInput(Gpio::InputType::Floating);
	}
	%% else
	/// maps to `setInput(InputType::PullUp)`
	xpcc_always_inline static void set() {
		Pin::setInput(Gpio::InputType::PullUp);
	}
	%% endif
	/// maps to `setOutput(::xpcc::Gpio::Low)`
	xpcc_always_inline static void reset() {
		Pin::setOutput(::xpcc::Gpio::Low);
	}
	xpcc_always_inline static void set(bool status) {
		if (status) { set(); }
		else { reset(); }
	}
	xpcc_always_inline static bool isSet() {
		return (Pin::getDirection() == xpcc::Gpio::Direction::In);
	}
	xpcc_always_inline static xpcc::Gpio::Direction getDirection() {
		return xpcc::Gpio::Direction::Out;
	}
	xpcc_always_inline static void
	connect(::xpcc::TypeId::SoftwareI2cMasterSda) {
		set();
	}
	xpcc_always_inline static void
	connect(::xpcc::TypeId::SoftwareI2cMasterScl) {
		set();
		xpcc::I2c::resetDevices< Pin >();
		set();
	}
};
%% endfor
/// @}

%% for gpio in gpios
	%% set port = gpio.port | upper
	%% set pin  = gpio.id

	%% for type in ["Output", "Input", "IO"]
		%% set name = "Gpio" ~ (type if type != "IO" else "") ~ port ~ pin
		%% set superclass = "Gpio" ~ type

/// {{type}} class for Pin {{port ~ pin}}
/// @ingroup	{{target.string}}_gpio
struct {{name}} : public Gpio, ::xpcc::{{superclass}}
{
public:
	static constexpr Port port = Port::{{port}};		///< the port of this GPIO
	static constexpr uint8_t pin = {{pin}};			///< the pin  of this GPIO
	static constexpr uint8_t mask = (1 << pin);	///< the mask of this GPIO

		%% if type in ["IO", "Output"]
	xpcc_always_inline static void setOutput(bool status) {
		setOutput();
		set(status);
	}
	xpcc_always_inline static void setOutput() {
			%% if pue is defined
		PUE{{port}} &= ~mask;
			%% endif
		DDR{{port}} |= mask;
	}
	xpcc_always_inline static void set() {
		PORT{{port}} |= mask;
	}
	xpcc_always_inline static void set(bool status) {
		if (status) { set(); }
		else { reset(); }
	}
	xpcc_always_inline static void reset() {
		PORT{{port}} &= ~mask;
	}
	xpcc_always_inline static void toggle() {
			%% if notoggle is defined
		PORT{{port}} ^= mask;
			%% else
		PIN{{port}} = mask;
			%% endif
	}
	xpcc_always_inline static bool isSet() {
		return (PORT{{port}} & mask);
	}
		%% endif
		%% if type in ["IO", "Input"]
	xpcc_always_inline static void configure(InputType type) {
		if (type == InputType::PullUp) {
			%% if pue is defined
			PUE{{port}} |= mask;
			%% else
			PORT{{port}} |= mask;
			%% endif
		}
		else {
			%% if pue is defined
			PUE{{port}} &= ~mask;
			%% else
			PORT{{port}} &= ~mask;
			%% endif
		}
	}
	xpcc_always_inline static void
	setInput(InputType type) {
		setInput();
		configure(type);
	}
	xpcc_always_inline static void setInput() {
		DDR{{port}} &= ~mask;
	}
	xpcc_always_inline static bool read() {
		return (PIN{{port}} & mask);
	}
			%% if 'extint' in gpio
				%% set af_id = gpio.extint | int
				%% if eicra is not defined
					%% set eicra = 'EICRA'
				%% endif
	xpcc_always_inline static void setInputTrigger(InputTrigger trigger) {
				%% if af_id < 4
					%% if isc2 is defined and af_id == 2
		{{isc2}} = ({{isc2}} & ~(1 << ISC2)) | ((i(trigger) & 0b01) << ISC2);
					%% else
		{{eicra}} = ({{eicra}} & ~(0b11 << 2*{{af_id}})) | (i(trigger) << 2*{{af_id}});
					%% endif
				%% else
		EICRB = (EICRB & ~(0b11 << 2*{{af_id - 4}})) | (i(trigger) << 2*{{af_id - 4}});
				%% endif
	}
	xpcc_always_inline static void enableExternalInterrupt() {
		EIMSK |= (1 << INT{{af_id}});
	}
	xpcc_always_inline static void disableExternalInterrupt() {
		EIMSK &= ~(1 << INT{{af_id}});
	}
	xpcc_always_inline static bool getExternalInterruptFlag() {
		return (EIFR & (1 << INTF{{af_id}}));
	}
	xpcc_always_inline static void acknowledgeExternalInterruptFlag() {
		EIFR |= (1 << INTF{{af_id}});
	}
			%% endif
			%% if 'pcint' in gpio
				%% set af_id = gpio.pcint | int
				%#- Go home Atmel, you're drunk!
				%% set af_reg = (af_id / 8) | int
				%% if target["family"] == 'attiny'
					%% if (target["name"] in ['2313', '4313']) and af_id >= 11 and af_id <= 17
						%% set af_reg = 2
					%% elif (target["name"] in ['20', '40', '1634']) and af_id >= 12 and af_id <= 17
						%% set af_reg = 2
					%% elif (target["name"] in ['13', '25', '45', '85', '2313', '4313'])
						%% set af_reg = ""
					%% endif
				%% endif
	xpcc_always_inline static void enablePCInterrupt() {
		PCMSK{{af_reg}} |= (1 << PCINT{{af_id}});
		PCICR |= (1 << PCIE{{af_reg}});
	}
	xpcc_always_inline static void disablePCInterrupt() {
		PCMSK{{af_reg}} &= ~(1 << PCINT{{af_id}});
		if (!PCMSK{{af_reg}}) {
			PCICR &= ~(1 << PCIE{{af_reg}});
		}
	}
	xpcc_always_inline static bool readPCInterruptFlag() {
		return (PCIFR & (1 << PCIF{{af_reg}}));
	}
	xpcc_always_inline static void acknowledgePCInterruptFlag() {
		PCIFR |= (1 << PCIF{{af_reg}});
	}
			%% endif
		%% endif
		%% if type in ["IO"]
	xpcc_always_inline static Direction getDirection() {
		return (DDR{{port}} & mask) ? Direction::Out : Direction::In;
	}
		%% endif
	xpcc_always_inline static void
	disconnect() {
		%% if type == "Output"
		DDR{{port}} &= ~mask;   // manual call to setInput()
			%% if pue is defined
		PUE{{port}} &= ~mask;
			%% else
		PORT{{port}} &= ~mask;
			%% endif
		%% else
		setInput(InputType::Floating);
		%% endif
	}
		%% for af in gpio.afs
			%% if (	(af.type == 'in' and type == 'Input') or
					(af.type == 'out' and type == 'Output') or
					(af.type == 'io' or type == 'IO')	)
	/// Connect `{{port~pin}}` as `{{af.name}}` to `{{af.peripheral}}`.
	inline static void
	connect(TypeId::{{ af.peripheral }}{{ af.name }}) {
				%% if af.name == "Scl" and type == 'IO'
		xpcc::I2c::resetDevices< {{name}} >();
				%% endif
				%% if af.name == "Txd"
		set();
				%% endif
				%% if af.type == "out"
		setOutput();
				%% elif af.type == "in"
		setInput();
				%% endif
	}
			%% endif
		%% endfor
		%% if type in ['IO', 'Output']
			%% for peripheral in   ['SoftwareSpiMasterMosi',
									'SoftwareSpiMasterSck']
	/// Connect to `{{peripheral}}`.
	xpcc_always_inline static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		setOutput();
	}
			%% endfor
		%% endif
		%% if type in ['IO', 'Input']
			%% for peripheral in ['SoftwareSpiMasterMiso']
	/// Connect to `{{peripheral}}`.
	xpcc_always_inline static void
	connect(::xpcc::TypeId::{{ peripheral }}) {
		setInput();
	}
			%% endfor
		%% endif
};

	%% endfor
%% endfor

%# Ports
/// @cond
// forward declaration for GpioPort
template< Gpio::Port Port, uint8_t StartPin, uint8_t Width, GpioPort::DataOrder PortOrder >
class GpioPortBase;
/// @endcond

/**
 * Creates a hardware port with StartPin as LSB and with Width.
 *
 * @tparam	StartPin	a Gpio pin
 * @tparam	Width		required width of the port (up to 8)
 * @ingroup {{target.string}}_gpio
 */
template< class StartPin, uint8_t Width, ::xpcc::GpioPort::DataOrder PortOrder = GpioPort::DataOrder::Normal >
class GpioPort : public ::xpcc::GpioPort, /** @cond */ public GpioPortBase< StartPin::port, StartPin::pin, Width, PortOrder > /** @endcond */
{
public:
	static constexpr uint8_t width = Width;

	static constexpr DataOrder
	getDataOrder()
	{ return PortOrder; }

	using PortType = uint8_t;

#ifdef __DOXYGEN__
	static void
	setOutput();

	static void
	setInput();

	static PortType
	read();

	static void
	write(PortType data);

	static void
	toggle();
#endif
};

/// @cond
%% for port in gpios | getPorts
template< uint8_t StartPin, uint8_t Width, ::xpcc::GpioPort::DataOrder PortOrder >
class GpioPortBase<Gpio::Port::{{port.name}}, StartPin, Width, PortOrder> : public Gpio
{
	static_assert(StartPin < {{port.startPin + port.width}},
			"StartPin too large, maximum {{port.startPin + port.width - 1}}.");
	static_assert(Width <= {{port.width}},
			"Width too large, maximum {{port.width}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port.startPin + port.width}},
			"StartPin + Width too large, maximum {{port.startPin + port.width}}.");

	static constexpr uint8_t dataMask = (1 << Width) - 1;
	static constexpr uint8_t portMask = dataMask << StartPin;

public:
	xpcc_always_inline static void setOutput() {
		DDR{{port.name}} |= portMask;
	}
	xpcc_always_inline static void setInput() {
		DDR{{port.name}} &= ~portMask;
	}
	inline static uint8_t read() {
		uint8_t data = PIN{{port.name}} & portMask;
		return (data >> StartPin);
	}
	inline static void write(uint8_t data) {
		data <<= StartPin;
		PORT{{port.name}} = (PORT{{port.name}} & ~portMask) | (data & portMask);
	}
	xpcc_always_inline static void toggle() {
	%% if notoggle is defined
		PORT{{port.name}} ^= portMask;
	%% else
		PIN{{port.name}} = portMask;
	%% endif
	}
};
// another specialization for DataOrder::Reversed
template< uint8_t StartPin, uint8_t Width >
class GpioPortBase<Gpio::Port::{{port.name}}, StartPin, Width, ::xpcc::GpioPort::DataOrder::Reversed> : public Gpio
{
	static_assert(StartPin < {{port.startPin + port.width}},
			"StartPin too large, maximum {{port.startPin + port.width - 1}}.");
	static_assert(Width <= {{port.width}},
			"Width too large, maximum {{port.width}}.");
	static_assert(Width > 0,
			"Width should be at least 1.");
	static_assert(StartPin + Width <= {{port.startPin + port.width}},
			"StartPin + Width too large, maximum {{port.startPin + port.width}}.");

	static constexpr uint8_t StartPinReversed = (4 - StartPin - Width) + 4;
	static constexpr uint8_t dataMask = (1 << Width) - 1;
	static constexpr uint8_t portMask = dataMask << StartPin;

public:
	xpcc_always_inline static void setOutput() {
		DDR{{port.name}} |= portMask;
	}
	xpcc_always_inline static void setInput() {
		DDR{{port.name}} &= ~portMask;
	}
	inline static uint8_t read() {
		uint8_t data = xpcc::bitReverse(uint8_t(PIN{{port.name}} & portMask));
		return (data >> StartPinReversed);
	}
	inline static void write(uint8_t data) {
		data = xpcc::bitReverse(uint8_t(data << StartPinReversed));
		PORT{{port.name}} = (PORT{{port.name}} & ~portMask) | (data & portMask);
	}
	xpcc_always_inline static void toggle() {
	%% if notoggle is defined
		PORT{{port.name}} ^= portMask;
	%% else
		PIN{{port.name}} = portMask;
	%% endif
	}
};
	%% if port.startPin == 0 and port.width == 8
template< ::xpcc::GpioPort::DataOrder DataOrder >
class GpioPortBase<Gpio::Port::{{port.name}}, 0, 8, DataOrder > : public Gpio
{
public:
	static constexpr uint8_t width = 8;

public:
	xpcc_always_inline static void setOutput() {
		DDR{{port.name}} = 0xff;
	}
	xpcc_always_inline static void setInput() {
		DDR{{port.name}} = 0;
	}
	xpcc_always_inline static uint8_t read() {
		return PIN{{port.name}};
	}
	xpcc_always_inline static void write(uint8_t data) {
		PORT{{port.name}} = data;
	}
	xpcc_always_inline static void toggle() {
		%% if notoggle is defined
		PORT{{port.name}} ^= 0xff;
		%% else
		PIN{{port.name}} = 0xff;
		%% endif
	}
};
// another specialization for DataOrder::Reversed
template<>
class GpioPortBase<Gpio::Port::{{port.name}}, 0, 8, ::xpcc::GpioPort::DataOrder::Reversed > : public Gpio
{
public:
	static constexpr uint8_t width = 8;

public:
	xpcc_always_inline static void setOutput() {
		DDR{{port.name}} = 0xff;
	}
	xpcc_always_inline static void setInput() {
		DDR{{port.name}} = 0;
	}
	xpcc_always_inline static uint8_t read() {
		return xpcc::bitReverse(uint8_t(PIN{{port.name}}));
	}
	xpcc_always_inline static void write(uint8_t data) {
		PORT{{port.name}} = xpcc::bitReverse(data);
	}
	xpcc_always_inline static void toggle() {
		%% if notoggle is defined
		PORT{{port.name}} ^= 0xff;
		%% else
		PIN{{port.name}} = 0xff;
		%% endif
	}
};
	%% endif

%% endfor
/// @endcond

}	// namespace {{target["family"]}}

}	// namespace xpcc

#endif
