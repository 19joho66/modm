// coding: utf-8
/* Copyright (c) 2013, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"

extern "C"
void
xpcc_gpio_enable(void)
{
%%	set prefix = "GPIO"
	// FIXME: add possibility to switch individual clocks on and off
%% if target.family in ["f2", "f4", "f7"]
%%	set clock_tree = "AHB1"
%% elif target.family in ["f0", "f3"]
%%	set clock_tree = "AHB"
%% elif target.family in ["f1"]
%%	set clock_tree = "APB2"
%%	set prefix = "IOP"
%% endif

	// Enable GPIO clock
	RCC->{{ clock_tree }}ENR  |=
%% for port in driver.gpio | lbuild.values("@port") | sort
%%	if not loop.last
		RCC_{{ clock_tree }}ENR_{{ prefix }}{{ port }}EN |
%%	else
		RCC_{{ clock_tree }}ENR_{{ prefix }}{{ port }}EN;
%%	endif
%% endfor

	// Reset GPIO peripheral
	RCC->{{ clock_tree }}RSTR |=
%% for port in driver.gpio | lbuild.values("@port") | sort
%%	if not loop.last
		RCC_{{ clock_tree }}RSTR_{{ prefix }}{{ port }}RST |
%%	else
		RCC_{{ clock_tree }}RSTR_{{ prefix }}{{ port }}RST;
%%	endif
%% endfor

	RCC->{{ clock_tree }}RSTR &= ~(
%% for port in driver.gpio | lbuild.values("@port") | sort
%%	if not loop.last
		RCC_{{ clock_tree }}RSTR_{{ prefix }}{{ port }}RST |
%%	else
		RCC_{{ clock_tree }}RSTR_{{ prefix }}{{ port }}RST);
%%	endif
%% endfor
}
