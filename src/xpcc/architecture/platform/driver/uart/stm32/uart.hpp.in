/*
 * Copyright (c) 2009-2012, 2016, Fabian Greif
 * Copyright (c) 2010, Martin Rosekeit
 * Copyright (c) 2011, Georgi Grinshpun
 * Copyright (c) 2011, 2013-2016, Niklas Hauser
 * Copyright (c) 2012, Sascha Schade
 * Copyright (c) 2013, 2016, Kevin Laeufer
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set hal = uart_name ~ "Hal" ~ id
%% set name = uart_name ~ id

#ifndef XPCC_STM32_UART_{{ id }}_HPP
#define XPCC_STM32_UART_{{ id }}_HPP

#include <xpcc/architecture/interface/uart.hpp>
#include "type_ids.hpp"
#include "uart_base.hpp"
#include "uart_baudrate.hpp"
#include "uart_hal_{{ id }}.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * Universal asynchronous receiver transmitter ({{ uart_name | upper ~ id }})
 *
 * @author		Kevin Laeufer
 * @author		Niklas Hauser
 * @ingroup		{{partname}}_uart
 */
class {{ name }} : public UartBase, public ::xpcc::Uart
{
public:
	/// TypeId used to connect GPIO pins to this peripheral's rx.
	static const TypeId::Uart{{ id }}Rx Rx;
	/// TypeId used to connect GPIO pins to this peripheral's tx.
	static const TypeId::Uart{{ id }}Tx Tx;

%% if options["buffered"]
private:
	/// Second stage initialize for buffered uart
	// that need to be implemented in the .cpp
	static void
	initializeBuffered(uint32_t interruptPriority);
%% endif

public:
template< 	class SystemClock, uint32_t baudrate,
		uint16_t tolerance = xpcc::Tolerance::OnePercent >
	static void xpcc_always_inline
%% if options["buffered"]
	initialize(uint32_t interruptPriority, Parity parity = Parity::Disabled)
%% else
	initialize(Parity parity = Parity::Disabled)
%% endif
	{
%% if target.family != "f1"
		constexpr UartBase::OversamplingMode oversample =
				UartBaudrate::getOversamplingMode(SystemClock::{{ name }}, baudrate);
%% endif

		{{ hal }}::initializeWithBrr(
				UartBaudrate::getBrr<SystemClock::{{ name }}, baudrate, tolerance>(),
%% if target.family == "f1"
				parity);
%% else
				parity,
				oversample);
%% endif
%% if options["buffered"]
		initializeBuffered(interruptPriority);
%% endif
		{{ hal }}::setTransmitterEnable(true);
		{{ hal }}::setReceiverEnable(true);
	}

	static void
	writeBlocking(uint8_t data);

	static void
	writeBlocking(const uint8_t *data, std::size_t length);

	static void
	flushWriteBuffer();

	static bool
	write(uint8_t data);

	static std::size_t
	write(const uint8_t *data, std::size_t length);

	static bool
	isWriteFinished();

	static std::size_t
	discardTransmitBuffer();

	static bool
	read(uint8_t &data);

	static std::size_t
	read(uint8_t *buffer, std::size_t length);

	static std::size_t
	discardReceiveBuffer();
};

}	// namespace stm32

}	// namespace xpcc

#endif // XPCC_STM32_UART_{{ id }}_HPP
