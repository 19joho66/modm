
class Instance(Module):
    def __init__(self, instance):
        self.instance = instance

    def init(self, module):
        module.name = str(self.instance)
        module.description = "I2C {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:i2c")
        module.add_option(
            NumericOption(
                name="buffer.transaction",
                description="",
                minimum=1,
                maximum=2 ** 16 - 2,
                default=8))
        return True

    def build(self, env):
        device = env[":target"]
        driver = device.get_driver("i2c")

        properties = device.properties
        properties["target"] = target = device.identifier
        properties["partname"] = device.partname
        properties["id"] = self.instance

        env.substitutions = properties
        env.outbasepath = "src/modm/platform/i2c"

        env.template("i2c_master.cpp.in", "i2c_master_{}.cpp".format(self.instance))
        env.template("i2c_master.hpp.in", "i2c_master_{}.hpp".format(self.instance))


def init(module):
    module.name = "i2c"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not device.has_driver("i2c:stm32"):
        return False

    module.depends(":platform:core")

    for instance in listify(device.get_driver("i2c")["instance"]):
        module.add_submodule(Instance(int(instance)))

    return True

def build(env):
    env.outbasepath = "src/modm/platform/i2c"
    env.copy("type_ids.hpp")
