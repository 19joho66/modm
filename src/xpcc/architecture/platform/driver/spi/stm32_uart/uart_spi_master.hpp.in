/*
 * Copyright (c) 2013-2016, Niklas Hauser
 * Copyright (c) 2013, 2016, Kevin Laeufer
 * Copyright (c) 2014, Sascha Schade
 * Copyright (c) 2016, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef XPCC_STM32_UART_SPI_MASTER{{ id }}_HPP
#define XPCC_STM32_UART_SPI_MASTER{{ id }}_HPP

#include <xpcc/architecture/interface/spi_master.hpp>
#include "../uart/uart_hal_{{ id }}.hpp"
#include "../uart/type_ids.hpp"
#include "uart_spi_type_ids.hpp"
#include "type_ids.hpp"

namespace xpcc
{

namespace stm32
{

/**
 * Serial Peripheral Interface of the Uart module.
 *
 * @warnind	Be aware, that the uart module can send bytes only LSB first.
 *			Therefore the data is bit reversed in software for DataOrder::MsbFirst.
 *
 * @author		Niklas Hauser
 * @ingroup		{{partname}}_spi
 */
class UartSpiMaster{{ id }} : public xpcc::SpiMaster, public UartBase
{
	static DataOrder dataOrder;
	static uint8_t state;
	static uint8_t count;
	static void *context;
	static ConfigurationHandler configuration;
public:
	static const TypeId::UartSpiMaster{{ id }}Sck  Sck;
	static const TypeId::UartSpiMaster{{ id }}Miso Miso;
	static const TypeId::UartSpiMaster{{ id }}Mosi Mosi;

public:
	enum class
	DataMode : uint32_t
	{
		Mode0 = 0b00,			///< clock normal,   sample on rising  edge
		Mode1 = USART_CR2_CPHA,	///< clock normal,   sample on falling edge
		Mode2 = USART_CR2_CPOL,	///< clock inverted, sample on falling  edge
		Mode3 = USART_CR2_CPOL | USART_CR2_CPHA
		///< clock inverted, sample on rising edge
	};

public:
	template< 	class SystemClock, uint32_t baudrate,
				uint16_t tolerance = xpcc::Tolerance::FivePercent >
	static void
	initialize()
	{
%% if target["family"] != "f1"
		constexpr UartBase::OversamplingMode oversample =
				UartBaudrate::getOversamplingMode(SystemClock::Usart{{ id }}, baudrate);
%% endif
		UsartHal{{ id }}::initializeWithBrr(
				UartBaudrate::getBrr<SystemClock::Usart{{ id }}, baudrate, tolerance>(),
%% if target["family"] == "f1"
				UsartHal{{ id }}::Parity::Disabled);
%% else
				UsartHal{{ id }}::Parity::Disabled,
				oversample);
%% endif

		UsartHal{{ id }}::setLastBitClockPulse(UsartHal{{ id }}::LastBitClockPulse::Output);
		UsartHal{{ id }}::setSpiClock(UsartHal{{ id }}::SpiClock::Enabled);
		UsartHal{{ id }}::setTransmitterEnable(true);
		UsartHal{{ id }}::setReceiverEnable(true);
		dataOrder = DataOrder::MsbFirst;
		state = 0;
	}


	static void
	setDataMode(DataMode mode)
	{
		UsartHal{{ id }}::setSpiDataMode(static_cast<UartBase::SpiDataMode>(mode));
	}

	/// @warning 	On this target, only `DataOrder::LsbFirst` is natively
	///				supported!
	///				`DataOrder::MsbFirst` is reimplemented in software using
	///				xpcc::bitReverse(), which adds some overhead.
	/// @see	xpcc::bitReverse()
	static void
	setDataOrder(DataOrder order)
	{
		dataOrder = order;
	}


	static uint8_t
	acquire(void *ctx, ConfigurationHandler handler = nullptr);

	static uint8_t
	release(void *ctx);


	static uint8_t
	transferBlocking(uint8_t data)
	{
		return RF_CALL_BLOCKING(transfer(data));
	}

	static void
	transferBlocking(uint8_t *tx, uint8_t *rx, std::size_t length)
	{
		RF_CALL_BLOCKING(transfer(tx, rx, length));
	}


	static xpcc::ResumableResult<uint8_t>
	transfer(uint8_t data);

	static xpcc::ResumableResult<void>
	transfer(uint8_t *tx, uint8_t *rx, std::size_t length);
};

} // namespace stm32

} // namespace xpcc

#endif // XPCC_STM32_UART_SPI_MASTER{{ id }}_HPP
