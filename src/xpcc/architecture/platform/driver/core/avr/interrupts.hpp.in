/*
 * Copyright (c) 2009, Martin Rosekeit
 * Copyright (c) 2009-2011, 2016, Fabian Greif
 * Copyright (c) 2011-2016, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

{{ generation_block }}

#ifndef XPCC_AVR_INTERRUPTS_HPP
#define XPCC_AVR_INTERRUPTS_HPP

#include "../device.hpp"

/**
 * @ingroup 	{{target.string}}
 * @defgroup	{{target.string}}_core Core
 */

namespace xpcc
{

/// @ingroup	{{target.string}}_core
namespace {{ target.family }}
{

/// enables global interrupts
static xpcc_always_inline void
enableInterrupts()
{
	sei();
}

/// disables global interrupts
static xpcc_always_inline void
disableInterrupts()
{
	cli();
}

%% if target.family == 'xmega'
/// Used to set the interrupt level of all modules.
/// @ingroup	xmega
enum class
InterruptLevel : uint8_t
{
	Off = 0x00,
	Low = 0x01,
	Medium = 0x02,
	High = 0x03,
};

/// @ingroup	xmega
enum class
InterruptControlLevel : uint8_t
{
	Low = PMIC_LOLVLEN_bm,
	Medium = PMIC_MEDLVLEN_bm,
	High = PMIC_HILVLEN_bm,
	All = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm,
};

/// @private
/// @{
static constexpr uint8_t
i(InterruptLevel level) { return static_cast<uint8_t>(level); }
static constexpr uint8_t
i(InterruptControlLevel level) { return static_cast<uint8_t>(level); }
/// @}

/**
 * Enable one or more of the three Interrupt levels.
 *
 * In order to work with interrupts on a xMEGA you need to enable
 * interrupts in general (enableInterrupts()) and enable the
 * level you wont to work with.
 *
 * Example:
 * @code
 * using namespace xpcc::xmega;
 * // reset all interrupt levels
 * resetInterruptLevel(InterruptControlLevel::All);
 * // set only High and Medium
 * setInterruptLevel(InterruptControlLevel::High);
 * setInterruptLevel(InterruptControlLevel::Medium);
 * enableInterrupts();
 * @endcode
 *
 * @ingroup	xmega
 */
static inline void
enableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL |= i(level);
}

/**
 * Disable interrupt levels.
 *
 * @ingroup	xmega
 */
static inline void
disableInterruptLevel(InterruptControlLevel level)
{
	PMIC_CTRL &= ~i(level);
}
%% endif

}	// namespace {{ target.family }}

}	// namespace xpcc


#endif	// XPCC_AVR_INTERRUPTS_HPP
