// coding: utf-8
/* Copyright (c) 2015, Roboterclub Aachen e.V.
 * All Rights Reserved.
 *
 * The file is part of the xpcc library and is released under the 3-clause BSD
 * license. See the file `LICENSE` for the full license governing this code.
 */
// ----------------------------------------------------------------------------

%% set loop = 3

%% if target is stm32f3 and not noiccm is defined
	%% set overhead = 24
%% else
	%% if target is stm32f4
		%% set overhead = 29
	%% elif target is stm32f1
		%% set overhead = 18
	%% else
		%% set overhead = 30
	%% endif
	// the ART Accelerator in the STM32 executes the short loop in the
	// _delay_ns function twice as fast as when executing from RAM!
	// Apparently this is due to the use of the "dedicated I-Bus and prefetch buffers",
	// whereas when executing from RAM "the instruction hast to be fetched using the
	// system bus, which incurs an extra wait state".
	// So for STM32's without I-CCM, we execute from Flash.
%% endif
	.section .fastcode, "x"
	.syntax	unified
	.align	4
	.thumb

	/**
	 * @brief	Dynamic delay loop (in nanoseconds resolution)
	 *
	 * The functions adapts its minimum delay for current clock rate,
	 * deprecating reliance on the F_CPU macro and enabling clock switching
	 * at runtime.
	 *
	 * Unfortunately, the setup cost varies anywhere from 25 cycles to 40
	 * cycles, and its timing is not accurate when interrupted by an exception.
	 *
	 * This code also exists as inline assembly, which reduces setup costs to
	 * 16-20 cycles, since no jump has to take place.
	 *
	 * @author  Niklas Hauser
	 */
	.global	_delay_ns
	.type	_delay_ns, %function
	.thumb_func
	.func	_delay_ns
_delay_ns:
	ldr		r1, =ns_per_cycle	// 2 cycles
	// setup overhead is {{ overhead }} cycles
	movs.n	r2, #({{ (overhead / loop) | int}})		// 1 cycle
	ldrh.n	r1, [r1, #0]		// 2 cycles
	muls.n	r2, r2, r1			// 2 cycles
	subs.n	r0, r0, r2			// 1 cycle
1:	subs.n	r0, r0, r1			// 1 cycle
	bpl.n	1b					// 2 cycles (when taken)
	//  {{ loop }} cycles for loop!
	bx.n		lr
	.size	_delay_ns, . - _delay_ns
	.endfunc

%% if target is cortex_m0
	// ------------------------------------------------------------------------
	/**
	 * @brief	Simple delay loop (in microseconds resolution)
	 *
	 * Use Timer-Interrupts etc. for delays whenever possible. This delay-loop
	 * is very inaccurate when interrupts or DMA transfers occur at the same
	 * time. This is because only the number of cycles inside this loop are
	 * counted. External interruptions go unnoticed and will prolong the delay
	 * time.
	 *
	 * C equivalent:
	 * @code
	 * extern "C" void _delay_us(uint32_t us);
	 * @endcode
	 *
	 * The function is put into the .fastcode section which resides in RAM to
	 * be sure that it is executed without any waitstates etc. Otherwise
	 * the delay variables had to be adapted every ARM type.
	 *
	 * An example are the AT91SAM types, which aren't able to run ARM code from
	 * Flash at above 20-30 Mhz without wait-states. Of course this changes
	 * the executing timing which we would like to avoid here to get
	 * at least an reasonably accurate delay.
	 *
	 * @see		_delay_ms
	 * @author	Fabian Greif
	 */
	.global	_delay_us
	.type	_delay_us, %function
	.thumb_func
	.func	_delay_us
_delay_us:
	// Example:
	// F_CPU / 1000000 = cycles per us => 72,000,000 / 1,000,000 = 72
	// 72 / 4 cycles per loop = 18
	movs	r1, #(F_CPU / 1000000 / 4)
	muls	r1, r0, r1
	beq		2f
1:
	subs	r1, r1, #1
	bne		1b
2:
	bx		lr
	.size	_delay_us, . - _delay_us
	.endfunc

	// ------------------------------------------------------------------------
	/**
	 * @brief	Simple delay loop (in milliseconds resolution)
	 *
	 * C equivalent:
	 * @code
	 * extern "C" void _delay_ms(uint32_t ms);
	 * @endcode
	 *
	 * @see		_delay_us
	 * @author	Fabian Greif
	 */
	.global	_delay_ms
	.type	_delay_ms, %function
	.thumb_func
	.func	_delay_ms
_delay_ms:
	// see _delay_us
	ldr		r1, =(F_CPU / 1000 / 4)
	muls	r1, r0, r1
	beq		2f
1:
	subs	r1, r1, #1
	bne		1b
2:	bx		lr
	.size	_delay_ms, . - _delay_ms
	.endfunc
%% endif

	.end
