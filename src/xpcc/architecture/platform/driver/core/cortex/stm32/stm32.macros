%# coding: utf-8
%# ----------------------------------------------------------------------------
%#* Copyright (c) 2011, Roboterclub Aachen e.V.
%#* All rights reserved.
%#*
%#* Redistribution and use in source and binary forms, with or without
%#* modification, are permitted provided that the following conditions are met:
%#*
%#*     * Redistributions of source code must retain the above copyright
%#*       notice, this list of conditions and the following disclaimer.
%#*     * Redistributions in binary form must reproduce the above copyright
%#*       notice, this list of conditions and the following disclaimer in the
%#*       documentation and/or other materials provided with the distribution.
%#*     * Neither the name of the Roboterclub Aachen e.V. nor the
%#*       names of its contributors may be used to endorse or promote products
%#*       derived from this software without specific prior written permission.
%#*
%#* THIS SOFTWARE IS PROVIDED BY ROBOTERCLUB AACHEN E.V. ''AS IS'' AND ANY
%#* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%#* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%#. IN NO EVENT SHALL ROBOTERCLUB AACHEN E.V. BE LIABLE FOR ANY
%#* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
%#* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
%#* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
%#* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
%#* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
%#* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
%#*/


%# This File includes STM32 specific macros for the generic cortex-m3 startup.c


%% macro defines()
%#
#define FLASH_WAIT_STATE_0		0x0
#define FLASH_WAIT_STATE_1		0x1
#define FLASH_WAIT_STATE_2		0x2
#define FLASH_WAIT_STATE_3		0x3
#define FLASH_WAIT_STATE_4		0x4
#define FLASH_WAIT_STATE_5		0x5
#define FLASH_WAIT_STATE_6		0x6
#define FLASH_WAIT_STATE_7		0x7
%#
%% endmacro

%% macro appendInterrupts()
%# Include Target Specific Interrupt Table
%% for vector in vectors
%%  do i.update({(vector.position | int) : [vector.name, ""]})
%% endfor
%% endmacro

%% macro startupCode()
%#
%% if target is stm32f3
	// enable clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
	// Remap USB Interrupts
	SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
%% endif

// TODO: Move this into SystemClock implementation
%% if target is stm32f2
	// prepare flash latency for working at 120MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_3;
%% elif target is stm32f3
	// prepare flash latency for working at 72MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_ACR_LATENCY_1;
%% elif target is stm32f4
	// prepare flash latency for working at 168MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_5;
%% elif target is stm32f7
	// prepare flash latency for working at 200MHz and supply voltage > 2.7
	FLASH->ACR = (FLASH->ACR & ~FLASH_ACR_LATENCY) | FLASH_WAIT_STATE_6;
%% endif

%% if target is stm32f2 or target is stm32f4
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;
%% elif target is stm32f3
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTBE;
%% elif target is stm32f7
	// enable flash prefetch
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
%% endif

%% if target is stm32f4
	// Enable Core Coupled Memory (CCM)
	RCC->AHB1ENR |= RCC_AHB1ENR_CCMDATARAMEN;
%% elif target is stm32f7
	// Enable Data Tighly Coupled Memory (DTCM)
	RCC->AHB1ENR |= RCC_AHB1ENR_DTCMRAMEN;
%% endif
%#
%% endmacro
