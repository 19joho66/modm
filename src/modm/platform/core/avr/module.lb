#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = ":platform:core"
    module.description = "AVR Core"

def prepare(module, options):
    if not options[":target"].has_driver("core:avr*"):
        return False

    module.depends(
        ":architecture:interrupt",
        ":architecture:assert",
        ":architecture:memory",
        ":stdc++",
        )

    module.add_option(
        EnumerationOption(
            name="ram_block_length",
            description="",
            enumeration=["2", "4", "8", "16", "32", "64"],
            default="16"))
    module.add_option(
        NumericOption(
            name="ram_length",
            description="",
            minimum=64,
            maximum=32768,
            default=1024))

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("core")

    properties = device.properties
    properties["target"] = target = device.identifier
    properties["driver"] = driver

    env.outbasepath = "modm/link"
    env.copy("linkerscript/linkerscript.ld", "linkerscript.ld")

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/core"

    env.copy("main.hpp")
    env.copy("ram.hpp")
    env.template("ram.cpp.in")

    # dealing with runtime assertions
    env.copy("assert.cpp")

    if env.has_module(":architecture:atomic"):
        env.copy("atomic_lock.hpp")

    if env.has_module(":architecture:unaligned"):
        env.copy("unaligned.hpp")

    if env.has_module(":architecture:accessor"):
        env.copy("flash_reader.hpp")

    if env.has_module(":architecture:delay"):
        env.copy("delay.hpp")

    if env.has_module(":architecture:clock"):
        # modm-test implements the clock methods itself
        if not env.has_module(":test:architecture"):
            env.copy("clock.cpp")

    env.template("interrupts.hpp.in")

    if "xmega" in driver["type"]:
        env.copy("utils.hpp")
        env.copy("utils.cpp")
