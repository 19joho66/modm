#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017, Fabian Greif
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = ":platform:core"
    module.description = """\
# AVR Core

Implements the interfaces defined in the `:architecture` modules.
Adds the `-mmcu={target}` compile flag.

"""

def prepare(module, options):
    if not options[":target"].has_driver("core:avr*"):
        return False

    module.depends(
        ":architecture:interrupt",
        ":architecture:assert",
        ":architecture:memory",
        ":stdc++",
        )

    module.add_option(
        EnumerationOption(
            name="ram_block_length",
            description="",
            enumeration=["2", "4", "8", "16", "32", "64"],
            default="16"))
    module.add_option(
        NumericOption(
            name="ram_length",
            description="",
            minimum=64,
            maximum=32768,
            default=1024))

    return True

def build(env):
    target = env[":target"]
    is_xmega = "xmega" in target.get_driver("core")["type"]

    env.outbasepath = "modm/link"
    env.copy("linkerscript/linkerscript.ld", "linkerscript.ld")
    env.collect(":build:linkflags", "-L{linkdir}", "-Tlinkerscript.ld")

    env.substitutions = {
        "target": target.identifier,
        "core": target.get_driver("core")["type"]
    }
    env.outbasepath = "modm/src/modm/platform/core"

    env.copy("main.hpp")
    env.copy("ram.hpp")
    env.template("ram.cpp.in")

    # dealing with runtime assertions
    if env.has_module(":architecture:assert"):
        env.template("../cortex/assert.cpp.in", "assert.cpp")
        env.template("../cortex/assert.hpp.in", "assert.hpp")

    if env.has_module(":architecture:atomic"):
        env.copy("atomic_lock.hpp")

    if env.has_module(":architecture:unaligned"):
        env.copy("unaligned.hpp")

    if env.has_module(":architecture:accessor"):
        env.copy("flash_reader.hpp")

    if env.has_module(":architecture:delay"):
        env.copy("delay.hpp")

    if env.has_module(":architecture:clock"):
        # modm-test implements the clock methods itself
        if not env.has_module(":test:architecture"):
            env.copy("clock.cpp")

    env.template("interrupts.hpp.in")

    if is_xmega:
        env.copy("utils.hpp")
        env.copy("utils.cpp")

    # avr-gcc only accepts certain device strings for its -mmcu flag
    # See https://gcc.gnu.org/onlinedocs/gcc/AVR-Options.html
    mmcu = target.partname.split("-")[0]
    for suffix in {"v", "f", "l", "rc"}:
        mmcu = mmcu[:-2] + mmcu[-2:].replace(suffix, "")
    env.collect(":build:archflags","-mmcu={}".format(mmcu))


