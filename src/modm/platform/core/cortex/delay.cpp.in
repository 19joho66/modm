/*
 * Copyright (c) 2015-2016, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "../device.hpp"
#include "hardware_init.hpp"
#include "delay_impl.hpp"

namespace modm
{

void modm_fastcode
delay_us(uint32_t us)
{
%% if with_assert
	modm_assert_continue_fail_debug(us <= 10'000'000ul,
		"delay.us", "modm::delay(us) can only delay a maximum of ~10 seconds!");
%% endif
	if (us == 0) return;    // 1 cycle, or 2 when taken

%% if core.startswith("cortex-m0") or core.startswith("cortex-m7")
	asm volatile (
		".syntax unified"       "\n\t"
		"muls.n	%0, %0, %1"     "\n\t"  // get number of cycles by us * fcpu_MHz:               1-2 cycles on cm3, up to 32 cycles on cm0
	"1:  subs.n	%0, %0, #{{loop}}"     "\n\t"  // subtract the loop cycles from the input:             1 cycle
		"bpl.n	1b"             "\n\t"  // keep doing that while result is still positive:      2 cycles (when taken)
	:: "r" (us), "r" (platform::delay_fcpu_MHz));
%% else
	uint32_t start = DWT->CYCCNT;
	// prefer this for cores with fast hardware multiplication
	int32_t delay = int32_t(platform::delay_fcpu_MHz) * us - {{ overhead }};

	while (int32_t(DWT->CYCCNT - start) < delay)
		;
%% endif
}

}

%% if not (core.startswith("cortex-m0") or core.startswith("cortex-m7"))
void
modm_dwt_enable(void)
{
	// Enable Tracing Debug Unit
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CYCCNT = 0;
	// Enable CPU cycle counter
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

MODM_HARDWARE_INIT_ORDER(modm_dwt_enable, 100);
%% endif
