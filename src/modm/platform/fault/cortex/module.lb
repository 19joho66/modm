#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

def init(module):
    module.parent = "platform"
    module.name = "fault.cortex"
    module.description = """\
# ARM Cortex-M Fault Handling

Dealing with Fault handlers.
"""

def prepare(module, options):
    if not options[":target"].has_driver("core:cortex-m*"):
        return False

    if options[":target"].identifier["platform"] not in ["stm32"]:
        return False

    module.depends(
        ":architecture:clock",
        ":platform:rcc",
        ":platform:gpio",
        ":cmsis:device")

    pins = [p["port"].upper() + p["pin"] for p in options[":target"].get_driver("gpio")["gpio"]]
    module.add_option(
        EnumerationOption(
            name="led",
            description="Toggle an LED on the specified pin",
            enumeration=pins + ["disabled"],
            default="disabled"))

    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("core")

    properties = device.properties
    properties["core"] = driver["type"]
    properties["target"] = device.identifier

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/core"

    env.template("hard_fault.sx.in")
    if env["led"] != "disabled":
        env.template("hard_fault_handler.cpp.in")
        env.collect(":::linkerscript.process_stack_size", 32)
