/*
 * Copyright (c) 2018, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_GPIO_SET_HPP
#define MODM_STM32_GPIO_SET_HPP

#include "../device.hpp"
#include "base.hpp"

namespace modm
{

namespace platform
{

/// @ingroup modm_platform_gpio
template< class... Gpios >
class GpioSet : public Gpio
{
protected:
	static constexpr uint32_t inverteds[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == PortName::{{port}} and Gpios::isInverted) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint32_t inverted(uint8_t id) { return inverteds[id]; }

	static constexpr uint32_t masks[{{ ports | length }}] = {
%% for port in ports
		(((Gpios::port == PortName::{{port}}) ? Gpios::mask : 0) | ...),
%% endfor
	};
	static constexpr uint32_t mask(uint8_t id) { return masks[id]; }
	static constexpr uint8_t numberOfPorts() {
		uint8_t r{0};
		for (const auto &m: masks) r += (m) ? 1 : 0;
		return r;
	}
	static constexpr PORT_PINCFG_Type *configs[] =
		{(PORT_PINCFG_Type*) &PORT->Group[uint32_t(Gpios::port)].PINCFG[uint32_t(Gpios::pin)] ...};
public:
	static constexpr uint8_t width = sizeof...(Gpios);
	static constexpr uint8_t number_of_ports = numberOfPorts();
public:
	static void setOutput()
	{
	%% for port, id in ports.items()
		if constexpr (mask({{id}})) REG_PORT_DIRSET{{id}} = mask({{id}});
	%% endfor
	}

	static void setOutput(bool status)
	{
		set(status);
		setOutput();
	}

	static void setOutput(OutputType, OutputSpeed)
	{
		setOutput();
	}

	static void configure(OutputType , OutputSpeed = OutputSpeed::MHz50)
	{
	}

	static void setInput()
	{
	%% for port, id in ports.items()
		if constexpr (mask({{id}})) {
			REG_PORT_DIRCLR{{id}} = mask({{id}});
		}
	%% endfor
	}

	static void setInput(InputType type)
	{
		configure(type);
		setInput();
	}

	static void configure(InputType type)
	{
		for (PORT_PINCFG_Type* config : configs) {
			set(type == InputType::PullUp);
			config->reg =
					PORT_PINCFG_INEN |
					(type != InputType::Floating) << PORT_PINCFG_PULLEN_Pos;
		}
	}

	static void setAnalogInput()
	{
	}

	static void set()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}})) REG_PORT_OUTSET{{id}} = mask({{id}});
%% endfor
	}

	static void set(bool status)
	{
		if (status) set();
		else        reset();
	}

	static void reset()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}})) REG_PORT_OUTCLR{{id}} = mask({{id}});
%% endfor
	}

	static void toggle()
	{
%% for port, id in ports.items()
		if constexpr (mask({{id}})) REG_PORT_OUTTGL{{id}} = mask({{id}});
%% endfor
	}

	static void disconnect()
	{
		// (Gpios::disconnect(), ...);
	}
};

} // namespace platform

} // namespace modm

#endif // MODM_STM32_GPIO_SET_HPP
