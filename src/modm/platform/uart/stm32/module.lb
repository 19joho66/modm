#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

shared_irqs = None
instances = []

def get_shared_irqs(env):
    global shared_irqs
    if shared_irqs is None:
        shared_irqs = [v["name"] for v in env[":target"].get_driver("core")["vector"]]
        shared_irqs = [v[5:] for v in shared_irqs if v.startswith("USART") and "_" in v]
        shared_irqs = [int(s) for s in shared_irqs[0].split("_")] if len(shared_irqs) else []
        shared_irqs = range(shared_irqs[0], shared_irqs[1] + 1) if len(shared_irqs) else []
    return shared_irqs

class Instance(Module):
    def __init__(self, driver, instance):
        self.driver = driver
        self.instance = int(instance)

    def init(self, module):
        module.name = str(self.instance)
        module.description = "UART {} instance".format(self.instance)

    def prepare(self, module, options):
        module.depends(":platform:uart")

        module.add_option(
            BooleanOption(
                name="buffered",
                description="",
                default=True))
        module.add_option(
            NumericOption(
                name="buffer.tx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=250))
        module.add_option(
            NumericOption(
                name="buffer.rx",
                description="",
                minimum=1, maximum=2 ** 16 - 2,
                default=16))

        return True

    def build(self, env):
        device = env[":target"]
        properties = device.properties
        properties["target"] = device.identifier
        properties["partname"] = device.partname
        properties["id"] = self.instance
        properties["driver"] = self.driver
        properties["features"] = self.driver["feature"] if "feature" in self.driver else []

        if properties["target"]["family"] == "f0":
            properties["apb"] = "2" if self.instance in [1, 6, 7, 8] else "1"
        else:
            properties["apb"] = "2" if self.instance in [1, 6, 9, 10] else "1"
        properties["apb_post"] = "1" if properties["target"]["family"] in ["l4"] and self.instance != 1 else ""

        properties["uart_name"] = self.driver["name"].capitalize()
        properties["shared_irqs"] = get_shared_irqs(env)

        env.substitutions = properties
        env.outbasepath = "modm/src/modm/platform/uart"

        env.template("uart_hal.hpp.in", "uart_hal_{}.hpp".format(self.instance))
        env.template("uart_hal_impl.hpp.in", "uart_hal_{}_impl.hpp".format(self.instance))
        env.template("uart.hpp.in", "uart_{}.hpp".format(self.instance))
        env.template("uart.cpp.in", "uart_{}.cpp".format(self.instance))

        global instances
        instances.append(self.instance)


def init(module):
    module.name = "uart"
    module.parent = "platform"

def prepare(module, options):
    device = options[":target"]
    if not (device.has_driver("uart:stm32*") or device.has_driver("usart:stm32*")):
        return False

    module.depends(
        ":architecture:atomic",
        ":architecture:interrupt",
        ":architecture:register",
        ":architecture:uart",
        ":cmsis:device",
        ":platform:gpio")

    for driver in (device.get_all_drivers("uart") + device.get_all_drivers("usart")):
        for instance in driver["instance"]:
            module.add_submodule(Instance(driver, instance))

    return True

def build(env):
    device = env[":target"]
    properties = device.properties
    properties["target"] = device.identifier
    properties["partname"] = device.partname

    drivers = (device.get_all_drivers("usart") + device.get_all_drivers("uart"))
    properties["extended_driver"] = ("extended" in drivers[0]["type"])
    properties["over8_sampling"] = ("feature" in drivers[0]) and ("over8" in drivers[0]["feature"])
    properties["tcbgt"] = ("feature" in drivers[0]) and ("tcbgt" in drivers[0]["feature"])
    properties["shared_irqs"] = get_shared_irqs(env)
    properties["instances"] = instances

    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/uart"
    env.template("uart_base.hpp.in")
    env.template("uart_baudrate.hpp.in")
    if any(i in properties["shared_irqs"] for i in instances):
        env.template("uart_shared.cpp.in")
