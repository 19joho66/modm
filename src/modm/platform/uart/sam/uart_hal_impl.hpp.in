/*
 * Copyright (c) 2013-2014, 2016, Kevin Läufer
 * Copyright (c) 2013-2017, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 * Copyright (c) 2017, Sascha Schade
 * Copyright (c) 2018, Christopher Durand
 * Copyright (c) 2018, Lucas Mösch
 * Copyright (c) 2020, Erik Henriksson
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

%% set name = uart_name ~ "Hal" ~ id
%% set sercom = sercom_name ~ id
%% set peripheral = sercom | upper

// ----------------------------------------------------------------------------
void
modm::platform::{{ name }}::setParity(const Parity parity)
{
	if (parity != Parity::Disabled) {
		{{ peripheral }}->USART.CTRLA.bit.FORM = 0x1; // Enable parity.
		{{ peripheral }}->USART.CTRLB.bit.PMODE = uint32_t(parity);
	} else {
		{{ peripheral }}->USART.CTRLA.bit.FORM = 0x0; // Disable parity.
	}
}

void
modm::platform::{{ name }}::enable()
{
	{{ peripheral }}->USART.CTRLA.bit.ENABLE = true;	// Uart Enable
	while({{ peripheral }}->USART.SYNCBUSY.bit.ENABLE); // Wait for sync.
}

void
modm::platform::{{ name }}::disable()
{
	{{ peripheral }}->USART.CTRLA.bit.ENABLE = false;	// Uart Disable
	while({{ peripheral }}->USART.SYNCBUSY.bit.ENABLE); // Wait for sync.
}

void
modm::platform::{{ name }}::reset()
{
	{{ peripheral }}->USART.CTRLA.bit.SWRST = true;	// Uart Reset
	while({{ peripheral }}->USART.SYNCBUSY.bit.SWRST); // Wait for sync.
}

template<class SystemClock, modm::baudrate_t baudrate>
void modm_always_inline
modm::platform::{{ name }}::initialize(Parity parity)
{
	// Enable peripheral clock in power manager.
	PM->APBCMASK.bit.{{ peripheral }}_ = true;
	// Init clock using GCLK0 as source.
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID_{{ peripheral }}_CORE |
                      GCLK_CLKCTRL_GEN_GCLK0 |
                      GCLK_CLKCTRL_CLKEN ;
	while (GCLK->STATUS.bit.SYNCBUSY);
	// Reset USART
	reset();
	// Set clock mode internal
	{{ peripheral }}->USART.CTRLA.bit.MODE = 0x1;
	// Set asynchronous mode
	{{ peripheral }}->USART.CTRLA.bit.CMODE = 0x0;
	// Set rx/tx pins
	{{ peripheral }}->USART.CTRLA.bit.RXPO = 0x3; // Pad3
	{{ peripheral }}->USART.CTRLA.bit.TXPO = 0x1; // Pad2;
	// Set character size to 8 bits
	{{ peripheral }}->USART.CTRLB.bit.CHSIZE = 0x0;
	// Set Data order to LSB first
	{{ peripheral }}->USART.CTRLA.bit.DORD = 0x1;
	// Set parity
	setParity(parity);
	// Set stop bits to 1
	{{ peripheral }}->USART.CTRLB.bit.SBMODE = 0x0;
	// fractional baud rate
	{{ peripheral }}->USART.CTRLA.bit.SAMPR = 0x1;
	// set baudrate (multiply by 8 to calc fractional part)
	uint16_t baudTimes8 = (SystemClock::Frequency * 8) / (16 * baudrate);
	SERCOM0->USART.BAUD.FRAC.BAUD = baudTimes8 / 8;
	SERCOM0->USART.BAUD.FRAC.FP = baudTimes8 % 8;
	// uint16_t baud = SystemClock::Frequency / (16 * baudrate);
	// SERCOM0->USART.BAUD.reg = baud;
	setReceiverEnable(true);
	setTransmitterEnable(true);
	// Enable USART
	enable();
}


void
modm::platform::{{ name }}::write(uint8_t data)
{
	{{ peripheral }}->USART.DATA.reg = data;
}

void
modm::platform::{{ name }}::read(uint8_t &data)
{
	data = {{ peripheral }}->USART.DATA.reg;
}

void
modm::platform::{{ name }}::setTransmitterEnable(const bool enable)
{
	{{ peripheral }}->USART.CTRLB.bit.TXEN = enable;
}

void
modm::platform::{{ name }}::setReceiverEnable(bool enable)
{
	{{ peripheral }}->USART.CTRLB.bit.RXEN = enable;
}

void
modm::platform::{{ name }}::enableOperation()
{
	enable();
}

void
modm::platform::{{ name }}::disableOperation()
{
	disable();
}

bool
modm::platform::{{ name }}::isReceiveRegisterNotEmpty()
{
	return {{ peripheral }}->USART.INTFLAG.bit.RXC;
}

bool
modm::platform::{{ name }}::isTransmitRegisterEmpty()
{
	return {{ peripheral }}->USART.INTFLAG.bit.DRE;
}
