#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2019, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------


def init(module):
    module.parent = ":platform"
    module.name = "rcc"
    module.description = "Reset and Clock Control (RCC)"

def prepare(module, options):
    if not options[":target"].has_driver("rcc:stm32*"):
        return False

    module.depends(":cmsis:device", ":utils", ":platform:clock")
    # FIXME: Move Peripherals enum somewhere better
    module.depends(":platform:gpio")
    return True

def build(env):
    device = env[":target"]
    driver = device.get_driver("rcc")

    properties = {}
    properties["target"] = target = device.identifier
    properties["partname"] = device.partname
    properties["core"] = device.get_driver("core")["type"]

    if target["family"] in ["f1", "f3", "f4"]:
        properties["hsi_frequency"] = 8
        properties["lsi_frequency"] = 40
    else:
        properties["hsi_frequency"] = 16
        properties["lsi_frequency"] = 32

    # TODO: Move this data into the device files
    properties["usbprescaler"] = (
        (target["family"] == "f0" and target["name"] in ["42", "48", "70", "72", "78"]) or
        (target["family"] == "f1" and target["name"] in ["02", "03"]) or
        (target["family"] == "f3" and (target["name"] in ["02", "73"] or
            (target["name"] in ["03"] and target["size"] in ["b", "c", "d", "e"]))))
    properties["pllprediv"] = \
        (target["family"] in ["f0", "f3"] or (target["family"] == "f1" and target["name"] in ["00", "05", "07"]))
    properties["pllprediv2"] = False    # FIXME: not sure what value this should have
    properties["hsi48"] = \
        target["family"] == "f0" and target["name"] in ["42", "48", "71", "72", "78", "91", "98"]
    properties["pll_p"] = target["family"] == "l4" and target["name"] not in ["12", "22"]

    flash_latencies = {}
    for vcore in device.get_driver("flash")["latency"]:
        flash_latencies[int(vcore["vcore-min"])] = sorted([int(f["hclk-max"]) for f in vcore["wait-state"]])

    properties["table"] = flash_latencies
    env.substitutions = properties
    env.outbasepath = "modm/src/modm/platform/clock"

    env.template("rcc.cpp.in")
    env.template("rcc.hpp.in")

    all_peripherals = []
    all_drivers = [d for d in device._properties["driver"] if d["name"] not in ["gpio", "core"]]
    translate = lambda s: "".join(p.capitalize() for p in s.split("_"))
    for d in all_drivers:
        dname = translate(d["name"])
        if "instance" in d:
            all_peripherals.extend([dname + translate(i) for i in d["instance"]])
        else:
            all_peripherals.append(dname)
    all_peripherals = sorted(list(set(all_peripherals)))

    rcc_map = env.query(":cmsis:device:rcc-map")
    rcc_map = {per:v for per,v in rcc_map.items() if per.capitalize() in all_peripherals}

    env.substitutions.update({
        "peripherals": rcc_map.keys(),
        "rcc_map": rcc_map,
    })
    env.template("rcc_impl.hpp.in")
