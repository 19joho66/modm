/*
 * Copyright (c) 2016, Sascha Schade
 * Copyright (c) 2016-2019, Niklas Hauser
 * Copyright (c) 2017, Fabian Greif
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "rcc.hpp"

%% for mV, table_MHz in table.items() | sort
static const uint32_t
flash_latency_{{ mV }}[] =
{
	%% for mhz in table_MHz
	{{ mhz * 1000000 }},
	%% endfor
};
%% endfor

uint32_t
modm::platform::Rcc::setFlashLatency(const uint32_t CPU_Frequency, const uint16_t mV)
{
%% if target["family"] == "f1" and target["name"] == "00"
	(void) CPU_Frequency;
	(void) mV;
	uint32_t max_freq(24'000'000);
%% else
	const uint32_t *lut(flash_latency_{{ (table|sort)[-1] }});
	uint8_t lut_size(sizeof(flash_latency_{{ (table|sort)[-1] }}) / sizeof(uint32_t));
	%% if table|length > 1
	// find the right table for the voltage
		%% for mV in (table|sort)[:-1]
	{% if not loop.first %}else {% endif %}if (mV < {{ mV }}) {
		lut = flash_latency_{{ mV }};
		lut_size = sizeof(flash_latency_{{ mV }}) / sizeof(uint32_t);
	}
		%% endfor
	%% else
	(void) mV;
	%% endif
	// find the next highest frequency in the table
	uint8_t latency(0);
	uint32_t max_freq(0);
	while (latency < lut_size)
	{
		if (CPU_Frequency <= (max_freq = lut[latency]))
			break;
		latency++;
	}

	if (CPU_Frequency <= max_freq)
	{
		uint32_t acr = FLASH->ACR & ~FLASH_ACR_LATENCY;
		// set flash latency
		acr |= latency;
	%% if target["family"] in ["f2", "f4", "l4"]
		// enable flash prefetch and data and instruction cache
		acr |= FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_ICEN;
	%% elif target["family"] == "f7"
		// enable flash prefetch and flash accelerator
		acr |= FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
	%% else
		// enable flash prefetch
		acr |= FLASH_ACR_PRFTBE;
	%% endif
		FLASH->ACR = acr;
	}
%% endif

	return max_freq;
}
