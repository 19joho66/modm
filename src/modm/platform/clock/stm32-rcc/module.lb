#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = "rcc"
    module.parent = "platform"
    module.description = "Reset and Clock Control (RCC)"

def prepare(module, options):
    if not options[":target"].has_driver("rcc:stm32*"):
        return False

    module.depends(":cmsis:device")
    # FIXME: Generate peripherals.hpp from :platform:core module
    module.depends(":platform:gpio")
    return True

def build(env):
    device = env[":target"]

    all_peripherals = []
    all_drivers = [d for d in device._properties["driver"] if d["name"] not in ["gpio", "core"]]
    translate = lambda s: "".join(p.capitalize() for p in s.split("_"))
    for d in all_drivers:
        dname = translate(d["name"])
        if "instance" in d:
            all_peripherals.extend([dname + translate(i) for i in d["instance"]])
        else:
            all_peripherals.append(dname)
    all_peripherals = sorted(list(set(all_peripherals)))

    rcc_map = env.query(":cmsis:device:rcc-map")
    rcc_map = {per:v for per,v in rcc_map.items() if per.capitalize() in all_peripherals}

    env.substitutions = {
        "peripherals": rcc_map.keys(),
        "rcc_map": rcc_map,
    }
    env.outbasepath = "modm/src/modm/platform/clock"
    env.template("rcc.hpp.in")
