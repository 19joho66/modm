#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2016-2018, Niklas Hauser
# Copyright (c) 2017, Fabian Greif
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

def init(module):
    module.name = ":board:disco-f469ni"
    module.description = FileReader("module.md")

def prepare(module, options):
    if not options[":target"].partname.startswith("stm32f469nih"):
        return False

    module.depends(
        ":architecture:clock",
        ":architecture:memory",
        ":debug",
        ":driver:ft6x06",
        ":platform:clock",
        ":platform:rcc",
        ":platform:core",
        ":platform:gpio",
        ":platform:i2c:1",
        ":platform:uart:3",
        ":platform:usb:fs",
        ":ui:display",
        ":math:utils")
    return True

def build(env):
    env.outbasepath = "modm/src/modm/board"
    env.substitutions = {
        "with_logger": True,
        "with_assert": env.has_module(":architecture:assert")
    }
    env.template("../board.cpp.in", "board.cpp")
    env.copy('.')
    env.collect(":build:openocd.source", "board/stm32f469discovery.cfg")

    env.collect(":platform:cortex-m:linkerscript.memory", linkerscript_memory)
    env.collect(":platform:cortex-m:linkerscript.sections", linkerscript_sections)
    env.collect(":platform:cortex-m:linkerscript.table_extern.copy", linkerscript_extern_copy)
    env.collect(":platform:cortex-m:linkerscript.table_extern.heap", linkerscript_extern_heap)


# =============================================================================
linkerscript_memory = """\
SDRAM (rwx) : ORIGIN = 0xC0000000, LENGTH = 16M
"""

linkerscript_sections = """\
.sdramdata :
{
    __sdramdata_load = LOADADDR (.sdramdata);   /* address in FLASH */
    __sdramdata_start = .;                      /* address in RAM */

    *(.sdramdata)

    . = ALIGN(4);
    __sdramdata_end = .;
} >SDRAM AT >FLASH

.heap_extern (NOLOAD) : ALIGN(4)
{
    *(.heap_extern)
    . = ALIGN(4);

    __heap_extern_start = .;
    . = ORIGIN(SDRAM) + LENGTH(SDRAM);
    __heap_extern_end = .;
} >SDRAM
"""

linkerscript_extern_copy = """\
LONG (__sdramdata_load)
LONG (__sdramdata_start)
LONG (__sdramdata_end)
"""

linkerscript_extern_heap = """\
LONG (0x801f)
LONG (__heap_extern_start)
LONG (__heap_extern_end)
"""
