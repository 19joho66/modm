#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010-2012, Fabian Greif
# Copyright (c) 2012, Sascha Schade
# Copyright (c) 2012, Niklas Hauser
# Copyright (c) 2013-2014, Kevin Laeufer
# Copyright (c) 2015, Georgi Grinshpun
# Copyright (c) 2016, Daniel Krebs
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os

Import('env')

# the buildpath of the library should only be used when building
# the library. Therefore a copy is made, so that the original environment
# remains untouched
envOld = env
env = env.Clone()
env.Append(CPPPATH = env['MODM_BUILDPATH'])

# find all files, except the one located in the 'test' folders
scan = env.FindFiles(path = '.', unittest=False)

sources = scan.sources
defines = scan.defines

# Platform Files
architecture_path = os.path.join('.', 'modm', 'architecture')
p_sources, p_defines, p_includes = env.GeneratePlatform(architecture_path)

# add sources to modm library in order for them to be built
sources.append(p_sources)

# hand defines to gcc through the -D flag for both modm and user code
envOld.Append(CPPDEFINES = p_defines)
env.Append(CPPDEFINES = p_defines)

for path in p_includes:
	if os.path.isabs(path):
		envOld.AppendUnique(CPPPATH = path)
	else:
		envOld.AppendUnique(CPPPATH = os.path.join(env['MODM_ROOTPATH'], 'src', path))

# Update Enivronment Vars set by env.GeneratePlatform for "envOld"
# TODO: check if GeneratePlatform could just be called through the
#       oldEnv
if 'LINKPATH' in env:
	envOld['LINKPATH'] = env['LINKPATH']
if 'LINKFILE' in env:
	envOld['LINKFILE'] = env['LINKFILE']
if 'DEVICE_SIZE' in env:
	envOld['DEVICE_SIZE'] = env['DEVICE_SIZE']

# External Library Files
sources, defines, includes = env.SConscript(
		os.path.join(env['MODM_ROOTPATH'], 'ext', 'SConscript'),
		exports = 'env sources defines')

for path in includes:
	envOld.AppendUnique(CPPPATH = os.path.join(env['MODM_ROOTPATH'], 'ext', path))

# Generate Library
library = env.Library(target = 'modm', source = sources)

result = (library, defines)
Return('result')
