#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Copyright (c) 2010-2012, Fabian Greif
# Copyright (c) 2012, Sascha Schade
# Copyright (c) 2012, Niklas Hauser
# Copyright (c) 2016, Daniel Krebs
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

Help("""
DESCRIPTION

   This SConstruct file has two responsibilities: run the unittests or build
   the modm-library.

COMMANDLINE ARGUMENTS
 
   The default is to run the unittests for the PC with the configuration
   from the file 'unittest.cfg'.

   To achieve the same behaviour you can also run:

      $ scons run config=unittest.cfg

config=file
   Load a different configuration file. The path to 'file' must be relative
   to the current directory or an absolute path.
   To build the unittests for an ATxmega use for example:
   
      $ scons config=unitttest_atxmega.cfg
   
   Another example is when you don't want to change the original
   configuration files when building the library
   
build
   Build the unittests without running them.
 
run
   Run the unittests. This argument is only available when compiling for
   the PC target.

template=file
   Use a different template to create the runner file.
 
library
   Build only the library without running the tests. The result is a file
   named 'libmodm.a' located in this directory. If no other configuration
   file is specified the file called 'library.cfg' will be used.

size
   Print the size of the program. This is especially useful for any AVR target
   because it shows the relative space used by the program.
 
symbols
   Print a list of symbols in the object files together with their size.
   Useful to check what occupy which amount of space.
""")

import os

# check which configuration-file to load
if 'library' in BUILD_TARGETS:
	defaultConfigfile = 'library.cfg'
else:
	target = ARGUMENTS.get('target', 'hosted')
	if target == 'atmega':
		defaultConfigfile = 'unittest_atmega.cfg'
	elif target == 'atxmega':
		defaultConfigfile = 'unittest_atxmega.cfg'
	elif target == 'stm32':
		defaultConfigfile = 'unittest_stm32.cfg'
	elif target == 'hosted':
		defaultConfigfile = 'unittest_hosted.cfg'
	else:
		print "Error: unknown target '%s'. Use 'hosted' (default), 'atmega', 'atxmega' or 'stm32'." % target
		exit(1)

# create the build environment
env = Environment(
		tools = ['modm'],
		toolpath = ['../scons/site_tools'],
		configfile = ARGUMENTS.get('config', defaultConfigfile))

# build the modm library
modmLibrary = env.ModmLibrary()

if 'library' in BUILD_TARGETS:
	env.Clean('library', 'libmodm.a')
	env.Alias('library', [modmLibrary,
			Command('libmodm.a', modmLibrary, Copy("$TARGET", "$SOURCE"))])
else:
	# find only files located in 'test' folders
	files = env.FindFiles(path = '.', unittest=True)
	
	# declare a file which later runs all the tests
	template = ARGUMENTS.get('template', env['MODM_CONFIG']['build']['template'])
	runner = env.UnittestRunner(target = env.Buildpath('runner.cpp'),
								source = files.header,
								template = template)
	
	sources = [runner] + files.sources
	
	# build the program
	program = env.Program(target = 'executable',
						  source = sources)
	
	env.Alias('build', program)
	env.Alias('size', env.Size(program))
	env.Alias('symbols', env.Symbols(program))
	env.Alias('defines', env.ShowDefines())
	
	if env.CheckArchitecture('hosted'):
		env.Alias('run', env.Run(program))
		env.Alias('all', ['build', 'run'])
	else:
		env.Alias('all', ['build', 'size'])
	
	env.Default('all')
