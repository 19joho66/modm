// coding: utf-8
// $Id$

/*!
\page build_system 3. Build system

XPCC uses SCons (a Python-based build tool) instead of the tradional
approach with Make. Chosen for its cross-platform capabilities and extendebility
SCons has proven to be a worthy replacement.

\section what What is SCons?

It is Open Source software using Python scripts as configuration files. The
SConstruct files are the equivalent of Makefiles, they define the targets
that SCons will create during the build process.

For more details see on SCons see:
- SCons documentation: http://www.scons.org/documentation.php
- Good Overview: http://www.humanized.com/presentations/scons/ 

\section usage Usage of the build system

Like a Makefile you need a SConstruct file in jour project, which holds
description about where to find and how to build the needed sourcefiles.
Aditionally the buildprocess can be modified by configuration files.

About how to create SConstruct files and the project/build configuration
read in their own documentation pages:
- \subpage sconstruct_template "Universal SConstruct template"
- \subpage sconstruct "SConstruct files: An introduction"
- \subpage sconstruct_advanced "SConstruct files: Advanced topics"
- \subpage scons_tools "SCons Tools"
- \subpage configuration_files "Configuration files"

To initiate the build process execute scons in the manner described below.

The default command is:
\verbatim
$ scons
\endverbatim
This will build all default targets for the current folder.

When you for example include SCons in Eclipse it might be needed to run SCons
in a different folder. This can be achieved with the \c -C parameter:
\verbatim
$ scons -C path/to/other/folder
\endverbatim

It should be almost never needed, but if you need to remove all temporary and
otherwise created files use:
\verbatim
$ scons -c
\endverbatim

Get help about the command-line targets:
\verbatim
scons -h
\endverbatim

These help messages have been programmed into the SConstruct files
for XPCC. They are not written or supported by the SCons developers.
To see the options that are written and supported by the SCons developers
you need to issue the command

\verbatim
scons -H
\endverbatim

By default SCons will stop compilation after the first error it encounters,
but one can tell SCons to continue building after it encounters an error.
To do this you append the \c -i option to the SCons command.

\subsection other Other useful options

Per default SCons won't print the complete compiler commandline, but only
something like:
\verbatim
...
Compiling C++: build/xpcc/math/geometry/test/point_set_2d_test.o
Compiling C++: build/xpcc/math/geometry/test/polygon_2d_test.o
Compiling C++: build/xpcc/math/geometry/test/angle_test.o
Compiling C++: build/xpcc/math/geometry/test/location_2d_test.o
Compiling C++: build/xpcc/math/geometry/test/vector_2d_test.o
Compiling C++: build/xpcc/math/geometry/test/line_segment_2d_test.o
Compiling C++: build/xpcc/math/geometry/test/line_2d_test.o
Compiling C++: build/xpcc/math/saturated/test/saturated_test.o
....
\endverbatim

To enable the complete output the parameter \c verbose is available. The
following will print the exact commands being executed:
\verbatim
scons verbose=1
\endverbatim

This will result in something like this for example above:
\verbatim
...
g++ -o build/xpcc/math/geometry/test/point_set_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/point_set_2d_test.cpp
g++ -o build/xpcc/math/geometry/test/polygon_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/polygon_2d_test.cpp
g++ -o build/xpcc/math/geometry/test/angle_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/angle_test.cpp
g++ -o build/xpcc/math/geometry/test/location_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/location_2d_test.cpp
g++ -o build/xpcc/math/geometry/test/vector_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/vector_2d_test.cpp
g++ -o build/xpcc/math/geometry/test/line_segment_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/line_segment_2d_test.cpp
g++ -o build/xpcc/math/geometry/test/line_2d_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/geometry/test/line_2d_test.cpp
g++ -o build/xpcc/math/saturated/test/saturated_test.o -c -std=gnu++98 -Woverloaded-virtual -funsigned-char -funsigned-bitfields -Wall -Wextra -Wundef -ggdb -I. xpcc/math/saturated/test/saturated_test.cpp
...
\endverbatim

This is far less readable but can show if something is wrong with the invoking
of the compiler etc.

*/
