// coding: utf-8
// $Id$

/*!
\page design_decisions 5.1 Design decisions

The main target of this library are small 8-bit AVR mircocontrollers. But it
should also be able to generate code for standard x86 PCs. This has partly historical
reasons but gives also a lot of advantages. Especially testing and debugging is
much easier when you can run your Code natively on your PC and don't have to
reprogram and debug a microcontroller every time.
This technique has its limits of course, but works very well for things like
generic and therefore platform independent algorithms.

An other advantage is that we can run nearly the same code on both sides when
the PC communicates with the microcontroller which reduces the effort for
developing the code.

While a PC has a lot of computational power it is somewhat limited on
microcontrollers. Therefore the most optimizations target the 8-bit
microcontrollers and accept possible slightly worse code for the x86 targets.

\section programming_techniques	Main ideas and techniques used here

Hardware components are implemented as template classes with static methods and
parameterised by template parameters. Even if this doesn't appear obvious at the
first time it allows the generation of very flexible but also fast code.

With this technique functions calls are direct calls without the need of a
vtable lookup like for virtual methods. This leads to fast access and low RAM
and Flash consumption.

There are two acceptable drawbacks:
-# Increased codesize if a driver is used many times with different parameters.
-# No possibly of reconfiguring at runtime.

\todo explain in more detail.

\section goals Optimizations goals

- Speed
- Ease of use

The main goal of nearly every optimisations is speed. Therefore
this library is heavily based on templates. Templates offer the
possibly of generating nearly optimal code for various occasions with the
drawback of increased code size when instantiated multiple times.
For our main target the AVRs this is acceptable because devices with big flash
memory are available. So, if you want the smallest possible code size this
isn't the right library for you, but if you want easy development with fast
execution you're welcome :)

*/
