// coding: utf-8
// $Id$

/*!
\page configuration_files	3.5 Configuration files

\section organization Organization of the source
\subsection project_files The 'project.cfg' and 'build.cfg' files

These files describe how to build a specific folder. They are simple
INI-files and can be edited with any editor you like.

\subsubsection build_cfg build.cfg

These files have two sections: \b build contains all information needed to
build the folder (and its subfolders), in \b defines you can list defines
(together with default values for them) needed by files in this folder.

Example:
\verbatim
[build]
target = atmega|atxmega

[defines]
mcp2515_clock = 16000000
\endverbatim

The target string is a regular expression matched against the architecture
string, generated by our SCons environment. This string has the form
"architecture/device".

Example:
\verbatim
ATMega644    => atmega/atmega644
ATXMega32A4  => atxmega/atxmega32a4
PC           => pc/pc
\endverbatim

To match any AVR use \b 'atmega|atxmega', for PC only target 'pc'.

\subsubsection project_cfg project.cfg

To build a directory as a standalone project just put a \c project.cfg
file in it. In this are information about the desired target enviroment.

A \c SConstruct file then be generated automatically which will include all
the source files from the folder and its subfolder to form the executable.

Example from the tests folder:
\verbatim
[general]
name = raw_tipc_transmitter

[build]
architecture = pc
\endverbatim

\section project_cfg	project.cfg

 - general
   - name
   - regenerate_sconstruct = yes|no
 - build
   - architecture = pc|atmega|atxmega
   - device
   - clock
   - library_name
 - environment
 - program
   - tool = avrdude
   - port
 - fusebits
   - lfuse
   - hfuse
   - efuse

 */
