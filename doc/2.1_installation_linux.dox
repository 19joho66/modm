// coding: utf-8
// $Id$

/*!
\page installation_linux 2.1 Installation on Linux systems

\section linux_installation Installation

For Ubuntu (and other Debian based Linux-Distributions) just type the 
following in a terminal and you're good to go:

\verbatim
$ sudo apt-get install python scons python-jinja2 python-lxml doxygen graphviz subversion
\endverbatim

\subsection pc PC

To compile programs for x86 systems you need the following packets:
\verbatim
$ sudo apt-get install gcc build-essential tipcutils libboost-thread-dev libboost-system-dev libasio-dev
\endverbatim

\subsection avr AVR

Some linux distributions offer the AVR toolchain already integrated, but
the supplied tools are sometimes not quite up to date.

There some alternatives to get a recent toolchain:
- <a href="http://avr-libc.nongnu.org/user-manual/install_tools.html">Build the tools by hand</a>
- <a href="http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&t=95328&start=0">Build-Script on avrfreaks.net</a>
  (with ready-to-use Debian/Ubuntu packages)
- ...

If you're lucky and your distribution offers recent packages the following might do:
\verbatim
$ sudo apt-get install gcc-avr binutils-avr avr-libc avrdude
\endverbatim

\section optimisation Optimisations

To use more than one CPU you might want to add the following to the end of your
'.bashrc' file (adjust the '4' to the number of CPUs in your system):

\verbatim
export SCONSFLAGS="-Q -j4"
\endverbatim

For more information on the parameter this read the chapter about
\ref build_system "SCons".

\section avrdude avrdude and USB programmers

If you want to use an Xmega bootloader for your project, you need to compile a patched version of avrdude 5.10.
Here is a small guide for Ubuntu 10.10:

Install the dependecies:
\verbatim
sudo apt-get install byacc flex libusb-dev
\endverbatim

Get the latest version of the <a href="http://download.savannah.gnu.org/releases/avrdude/">avrdude source</a>.
Get the <a href="https://savannah.nongnu.org/bugs/download.php?file_id=20392">Xmega bootloader patch</a> (<a href="https://savannah.nongnu.org/bugs/?28744">discussion</a>)

Place the patch file in the extracted avrdude source folder and run:
\verbatim
patch -i xmega_boot_rev3.patch
\endverbatim

Check if avrdude will be compiled with usb support using libusb:
\verbatim
./configure | grep usb
\endverbatim

If it says 'yes', then finish the installation:
\verbatim
make && sudo make install
\endverbatim

Voil√°.


When using Ubuntu avrdude might not detect USB programmers out of the box. The
problem is that it has not the necessary permission. To allow avrdude to access
USB programmers do the following:

\verbatim
gksu gedit /etc/udev/rules.d/80-usbprog.rules
\endverbatim

Add the following content:

\verbatim
ATTR{idVendor}=="03eb", ATTR{idProduct}=="2104", GROUP="plugdev", MODE="0660" # AVRISP mkII
ATTR{idVendor}=="03eb", ATTR{idProduct}=="2107", GROUP="plugdev", MODE="0660" # AVR-Dragon
ATTR{idVendor}=="03eb", ATTR{idProduct}=="2103", GROUP="plugdev", MODE="0660" # JTAG ICE mkII
ATTR{idVendor}=="03eb", ATTR{idProduct}=="2106", GROUP="plugdev", MODE="0660" # STK600
ATTR{idVendor}=="16c0", ATTR{idProduct}=="05dc", GROUP="plugdev", MODE="0660" # USBASP von www.fischl.de
ATTR{idVendor}=="03eb", ATTR{idProduct}=="2ffa", GROUP="plugdev", MODE="0660" # AT90USB
ATTR{idVendor}=="10c4", ATTR{idProduct}=="ea60", GROUP="plugdev", MODE="0660" # AVR910
\endverbatim

Now \c udev has to be restarted:

\verbatim
sudo /etc/init.d/udev restart
\endverbatim

If the programmer was connected you have to disconnect and reconnect. After
this everything should work.
*/
