// coding: utf-8
// $Id$

/*!
\page system_design_builder	6.2 Builder

\section base builder_base.Builder
Builders are derived from \c builder_base.Builder. It uses
\c optparse.OptionParser to evaluate the commandline.

\subsection options Commandline Options
Default added Options are 
- -o / --outpath
- -t / --template_path

The real function of these options are defined in extending builders.
\subsection setup setup()
The extending builders may define additional options during setup function.

\subsection generate generate()
During the generate function usually the builder will request a template,
 generate substitutions from the tree and write the output file.
It also may raise builder.BuilderException at any time for any reason.

\verbatim
# Example:
template = self.template('templates/robot_identifier.tpl')
substitutions = {
	'components': self.tree.components,
	'actions': self.tree.components.actions,
	'events': self.tree.events
}
self.write(file, template.render(substitutions) + "\n")
\endverbatim

To the method template may be passed filter needed by the template file.
\verbatim
def template(self, filename, filter=None):
\endverbatim


\section cpp_identifier cpp_identifier.IdentifierBuilder
Generates enums for id's of components, actions and events. Uses
'templates/robot_identifier.tpl'

\subsection options Commandline Options
- outpath can be a path to a folder, or a file with any extension. If it
   is a folder, the name of the file will be 'identifier.hpp'.

\section cpp_packets cpp_packets.TypeBuilder
Generates source and header file containing the type definitions. Uses 
'templates/robot_packets.hpp.tpl' and 'templates/robot_packets.cpp.tpl'

\subsection options Commandline Options
- outpath Comon path for output files
- \c --source_path Output path for the source file
- \c --header_path Output path for the header file
- \c --system_include_path Include directive
- \c --quote_include_path Include directive

Outpath has to be either a folder or None. If not None generated files will
have the names 'packets.hpp' and 'packets.cpp'. If different paths
required don't set outpath.
If outpath is \c None both \c source_path and \c header_path must be folders.
The names of files will be \c 'packets.hpp' and \c 'packets.cpp'.

The file packets.cpp will have one <tt>#include</tt> directive.

\verbatim
#include "packets.hpp"
\endverbatim

If other is required use one of the options \c system_include_path or
\c quote_include_path. The generated include will be equivalent to:

\verbatim
if system_include_path:
    '#indlude <%s>' % os.path.join(system_include_path, 'packets.hpp')
elif quote_include_path:
    '#indlude "%s"' % os.path.join(quote_include_path, 'packets.hpp')
else:
    '#include "packets.hpp"'
\endverbatim

\section cpp_postman cpp_postman.PostmanBuilder
Generates a postman for one container. Uses 'templates/postman.hpp.tpl' and
'templates/postman.cpp.tpl'.

\subsection options Commandline Options
- outpath Folder where to put outputfiles 'postman.hpp' and 'postman.cpp'.
- --container Name of container.

Read more about postman:
\ref system_design_components

*/
