// coding: utf-8
// 
// $Id$

/*!
\page build_system Build system

In this project we use SCons (a Python-based build tool) instead of the tradional
aproach using Make. The main reason for this decision was that it is a 
nightmare to create Makefiles which works on Linux and Windows and support 
different configurations.

The availability of the full power of the Python language in the 
SConstruct-files (the equivalent to Makefiles) allowed us to create a easy
extensible and flexible system. Especially debugging is much easier that
way.

\section requirements Requirements
\subsection build Build system
\subsubsection linux Linux

For Ubuntu (and other Debian based Linux-Distributions) just type the 
following in a terminal and you're good to go:

\verbatim
$ sudo aptitude install python scons python-jinja2 python-lxml
\endverbatim

To generate the documentation you also need the following packets:

\verbatim
$ sudo aptitude install doxygen graphviz
\endverbatim

\subsubsection windows Windows

Windows users have to install all tools by hand unfortually. How to do that is
explaind on the websites of the respective projects:

- http://www.python.org/download/
- http://www.scons.org/download.php
- http://sourceforge.net/projects/pywin32/

- http://pypi.python.org/pypi/setuptools
- http://codespeak.net/lxml/installation.html

The install \c lxml with \c setuptools type <tt>easy_install lxml==xxx</tt>
into the cmd window. Replace xxx with the last version which provides windows
binaries.

It is also possible to install the python modules with easy_install
- <tt>easy_install scons</tt> (If during exexuting of Scons python does not
  find Sconsmodule use the windows installer instead of easy_install to install Scons)
- <tt>easy_install jinja2</tt>

To program with AVRISP mkII you can use AVR Studio or install libusb to
program using the XPCC system (avrdude)

- http://www.libusb.org/

\todo	Which driver is need, usb filter?

Optional and only needed to regenerate this documentation:
- http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
- http://www.graphviz.org/Download_windows.php

\subsection compile_pc Compiling for the PC

The PC Software is currently Linux only, because it uses the TIPC kernel module
for interprocess communication which is only available for Unix-like operating
systems.

To be able to compile files you need to install the following packets:
\verbatim
$ sudo aptitude install gcc build-essential tipcutils libboost-thread-dev
\endverbatim

\todo check packet list for completeness!

\subsection compile_avr	Compiling for AVRs

\subsubsection Linux

\todo add description

\subsubsection Windows

Just install the newest WinAVR package (http://winavr.sourceforge.net) and
your compiler should be ready to use.

\section organization Organization of the source
\subsection project_files The 'project.cfg' and 'build.cfg' files

These files describe how to build a specific folder. They are simple
INI-files and can be edited with any editor you like.

\subsubsection build_cfg build.cfg

These files have two sections: \b build contains all information needed to
build the folder (and its subfolders), in \b defines you can list defines
(together with default values for them) needed by files in this folder.

Example:
\verbatim
[build]
target = atmega|atxmega

[defines]
mcp2515_clock = 16000000
\endverbatim

The target string is a regular expression matched against the architecture
string, generated by our SCons environment. This string has the form
"architecture/device".

Example:
\verbatim
ATMega644    => atmega/atmega644
ATXMega32A4  => atxmega/atxmega32a4
PC           => pc/pc
\endverbatim

To match any AVR use \b 'atmega|atxmega', for PC only target 'pc'.

\subsubsection project_cfg project.cfg

To build a directory as a standalone project just put a \c project.cfg
file in it. In this are information about the desired target enviroment.

A \c SConstruct file then be generated automatically which will include all
the source files from the folder and its subfolder to form the executable.

Example from the tests folder:
\verbatim
[general]
name = raw_tipc_transmitter

[build]
architecture = pc
\endverbatim

\b name need to unique and will be the name of the executeable.

The full documentation is has its own page: \subpage project_cfg.

\todo Extend this documentation

\section usage Usage of the build system

Run <tt>scons update</tt> to regenerate the SConstruct files for the tests folder,
<tt>scons doc</tt> will create the doxygen documentation.

With <tt>scons templates</tt> you can regenerate the template files, but usally
you don't need to do that. 

\section optimisation Optimisations
\subsection configure_scons Configure SCons

To use more than one CPU Linux users might want to add the following to the
'.bashrc' file (adjust the '4' to the number of CPUs in your system):

\verbatim
export SCONSFLAGS="-Q -j4"
\endverbatim

Windows users achieve the same by setting the 'SCONSFLAGS' Variable in the
'System Properties' window.

*/
