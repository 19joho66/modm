// coding: utf-8
// 
// $Id$

/*!
@page build_system Build system

In this project we use SCons (a Python-based build tool) instead of tradional
aproach with Make. The main reason for this decision was that it was a 
nightmare to create Makefiles which work on Linux and Windows and support 
different configurations.

The availability of the full power of the Python language in the 
SConstruct-files  (the equivalent to Makefiles) allowed us to create a easy
extensible and flexible system. Especially the debugging is much easier that
way.

@section requirements Requirements
@subsection build Build system
@subsubsection linux Linux

For Ubuntu (and other Debian based Linux-Distributions) just type the 
following in a terminal and you're good to go:

@verbatim
$ sudo aptitude install python scons
@endverbatim

To generate the documentation and regenerate the template files you also need
the following packets:

@verbatim
$ sudo aptitude install doxygen graphviz python-jinja2
@endverbatim

@subsubsection windows Windows

Windows users have to install all the tools by hand. How to do that is explaind
on the websites of the respective projects:

- http://www.python.org/download/
- http://www.scons.org/download.php

- http://www.stack.nl/~dimitri/doxygen/download.html#latestsrc
- http://www.graphviz.org/Download_windows.php

@subsection compile_pc Compiling for the PC

The PC Software is Linux only, because it uses the TIPC module for 
interprocess communication which is only available for *nix operating systems.

@verbatim
$ sudo aptitude install gcc build-essential tipcutils
@endverbatim

\todo check packet list!

@subsection compile_avr	Compiling for AVRs

\todo add description

@section organization Organization of the source
@subsection project_files The 'project.cfg' and 'build.cfg' files

These files describe how to build a specific folder. They are simple
INI-files and can be edited with any editor you like.

@subsubsection build_cfg build.cfg

These files have to section: \b build contains all information needed to
build the folder (and its subfolders), in \b defines you can list defines
(together with default values) used by files in this folder.

Example:
@verbatim
[build]
target = atmega|atxmega

[defines]
mcp2515_clock = 16000000
@endverbatim

The target string is a regular expression matched against the architecture
string, generated by the SCons environment. This string has the form
"architecture/device".

@subsubsection project_cfg project.cfg

Example from the tests folder:
@verbatim
[general]
name = raw_tipc_transmitter

[build]
architecture = pc
@endverbatim


build this directory as a standalone project, all the files from the
subdirectories will be included as well.

@todo Extend this documentation

@section usage Usage of the build system

Run \b scons \b update to regenerate the SConstruct files for the tests folder,
\b scons \b doc will create the doxygen documentation.

With \b scons \b templates you can regenerate the template files, but usally
you don't need to do that. 

@section optimisation Optimisations
@subsection configure_scons Configure SCons

To use more than one CPU Linux users might want to add the following to the
'.bashrc' file (adjust the '4' to the number of CPUs in your system):

@verbatim
export SCONSFLAGS="-Q -j4"
@endverbatim

Windows users achieve the same by setting the 'SCONSFLAGS' Variable in the
'System Properties' window.

*/
