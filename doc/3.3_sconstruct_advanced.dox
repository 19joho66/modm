// coding: utf-8
// $Id$

/*!
\page sconstruct_advanced 3.3 SConstruct files: Advanced topics

One important thing to remember about SConstruct files is that they are
declarative, rather than strictly imperative. This means that the order in
which the SCons functions are called in the SConstruct file does not affect
the order in which SCons actually builds the programs and object files you
want it to build.

With the SConstruct file you tell SCons what you want done and let SCons figure
out the order in which to do it.

\section example Example

Let's start with a complex example for a SConstruct file used to build a
project for an AVR:

First the 'project.cfg' configuration file:
\include project_example.cfg

(For a detailed explanation about the synatx of the configuration file see
the associated section: \ref configuration_files "Configuration files")

Together with this SConstruct file:

\verbatim
env = Environment(tools = ['xpcc'], toolpath = ['../scons'])

files = env.FindFiles(path = '.')

program = env.Program(target = env['XPCC_CONFIG']['general']['name'], source = files.sources)

env.XpccLibrary()

env.Defines()

env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))

hexfile = env.Hex(program)
env.Alias('program', env.Avrdude(hexfile))

env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('fuse', env.AvrdudeFuses())
env.Alias('all', ['build', 'size'])

env.Default('all')
\endverbatim

\section description Detailed description 

Let's get through this step by step:

\verbatim
env = Environment(tools = ['xpcc'], toolpath = ['../../xpcc/scons'])
\endverbatim

Create an environment and load the \ref scons_tools "xpcc tool". This checks
the configuration file and finds the \e build section with an \e architecture
entry. Form the value (here \e 'atmega') it determines that we want to compile
code for and AVR and loads the complete AVR toolchain among the XPCC
specific tools.

Therefore things like \e Hex or \e Avrdude are available. This might not be
true if we specifiy another architecture.

Read more about this on the page about our \ref scons_tools "SCons tools".

\verbatim
files = env.FindFiles(path = '.')
\endverbatim

See \ref tool_configfile_find "FindFiles()".

\verbatim
program = env.Program(target = env['XPCC_CONFIG']['general']['name'], source = files.sources)
\endverbatim

Create our program from all source files found in the project folder and
the subfolders.

The name of the executable is determined here by the value in of the \e name
entry in the section \e general of our configuration file. For this example it
is \b example.
Therefore the resulting file will be called \c example.elf. Elf is the 
standard file-ending for AVR executeables and is added automatically by SCons.
If the program would be a Windows executable the name would be \c example.exe.

You can see another important feature of the \ref scons_tools "xpcc tool" here:
Everything from the configuration file is accessible throu the Python dict
in \e env['XPCC_CONFIG']. For example <tt>print env['XPCC_CONFIG']['build']['device']</tt>
will output \e atmega644.

\verbatim
env.XpccLibrary()
\endverbatim

This tells SCons two things:
-# You want to use the XPCC library in your program (link to \e libxpcc.a)
-# How to build the library

As said in the beginning: SConstruct are declarative. So it doesn't matter
where you put this line. It can be before or after the Program() builder.

\verbatim
env.Defines()
\endverbatim

Advise SCons to create a file called \c defines.hpp with the values form the
section 'defines' form our configuration file.

SCons will create this file only when you need it or request it explicitly.
Unless your code contains a line like <tt>\#include "defines.hpp"</tt> it won't
be created.

\verbatim
env.Alias('size', env.Size(program))
env.Alias('symbols', env.Symbols(program))
\endverbatim

These targets show useful information about your project, for example how
much flash space is used in total or which symbol in your program occupies
how much space.

\verbatim
hexfile = env.Hex(program)
\endverbatim

The result of the \e Program() builder is a file called \c example.elf, but
most programming tools for the AVRs need a Hex-file instead of an Elf-file.

With this builder we tell SCons to build a Hex-file from our Elf-file.

\verbatim
env.Alias('program', env.Avrdude(hexfile))
\endverbatim

The Hex-file now can be used to program the AVR using avrdude. The neccessary
information about how to do are collected from the \e avrdude section
of the configuration file.

Here you see another feature of SCons: aliases. Aliases can be used the create
commandline targets. When you type <tt>scons program</tt> SCons will call
the avrdude builder.

Read more about aliases in the official documentation:
<a href="http://www.scons.org/doc/HTML/scons-user/c4322.html">Alias Targets</a>

\verbatim
env.Alias('fuse', env.AvrdudeFuses())
\endverbatim

Just as programming the flash you can program the fuses of the AVR. Therefore
you need a \e fusebits section in the configuration file.

To calculate the hex-values it is most convenient to use something like the
<a href="http://www.engbedded.com/fusecalc/">Online Fuse Calculator</a>.

\verbatim
env.Alias('build', [hexfile, env.Listing(program)])
env.Alias('all', ['build', 'size'])
\endverbatim

Some more aliases. As you can see aliases can point to more that one target.

\verbatim
env.Default('all')
\endverbatim

Set the default target to \e all. This target will be build when nothing
else is specifiy via the commandline.
 */
