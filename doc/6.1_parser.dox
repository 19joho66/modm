// coding: utf-8
// $Id$

/*!
\page system_design_parser	6.1 Parser

The Parser is a Python project, which is able to read and interpret the xml
file, which describes the system and it's behaviour.

Usage:
\verbatim
	try:
		parser = Parser('path/to/robot.xml', validate=True)
		parser.parse()
	except ParserError, e:
		print "Error:", e
		sys.exit(1)
\endverbatim

Executing these lines creates a Parserobject with variables containing the
whole description of the xml-files, or ParserException will be raised if 
something gone wrong.

\section system_design_parser_attributes Object Structures and Attributes
Parser:
- dict:components[name:structure.component.Component]\n
   Contains all components except abstract and reference.
- dict:container[name:structure.container.Container]\n
   Contains containers.
- dict:events[name:structure.event.Event]\n
   Contains events.
- dict:types[name:structure.type.Typedef or structure.type.Struct or structure.type.Enum or structure.type.BuiltIn]\n
   Contains types.
- dict:components.actions[name:structure.component_element.Action]\n
   All actions
- dict:components.subscriptions[eventname: list[structure.component.Component]\n
   All events, and list of components subscribing them.
- filename
- modify_time
- bool:reference
- bool:use_reference
- bool:validate
- (xmlElement:xml) for internal use

structure.component.Component
- int:id
- str:name
- str:description
- bool:abstract is set to True if component is placed in one of containers
- str:extends name of extended component
 
- dict:actions[name:structure.component_element.Action]
- dict:events.publish[name:structure.event.Event]
- dict:events.subscribe[name:structure.event.Event]
 
- bool:reference\n
   checks it's name and all of it's elements

structure.component_element.Action:
- int:id
- str:name
- str:description
- str:parameterType
- str:returnType
 
- bool:reference
 
structure.event.Event:
- int:id
- str:name
- str:description war tuple?
- str:type
- rate
 
- bool:reference
 

structure.container.Container:
- str:name
- str:description
 
- dict:components[name:structure.component.Component]
- dict:subscriptions[eventName:list[structure.component.Component]]
- dict:events.publish[name:structure.component_element.Event]
- dict:events.subscribe[name:structure.component_element.Event]

- bootloader
- bool:reference


structure.component_element.Event:
- int:id=-1
- str:name
- str:description=None
 
- bool:reference



structure.type.Typedef(BaseType)
- str:unit
- SubType:type

structure.type.BuiltIn(BaseType)
 
structure.type.Struct(BaseType)
- list:elements[structure.type.Element]

structure.type.Enum(BaseType)
- list:_elements[structure.type.Element]
- int:last_value (internal use)
 

structure.type.Element in Struct
- bool:_checked
- str:description
- int:level
- str:name
- int:size
- str:unit
- SubType:type

structure.type.Element in Enum
- str:description
- str:name UPPER_UNDERSCORE
- str:value

structure.type.BaseType
- str:name
- str:description
- int:size

- bool:_checked
- int:level
 
- bool:isEnum
- bool:isStruct
- bool:isTypedef
 
- bool:reference
 
structure.type.SubType
- int:count
- bool:isArray
- str:name
- str:raw name of rawtype
- size None?
 
\section system_design_parser_process Parsing process

\verbatim
class Parser:
	def __init__(self, xmlfile, reference=False, use_reference=False, validate=True):
	def parse(self):
\endverbatim

Executing the constructor causes Parser to generate a tree from the xmlfile.

The parse method evaluates the parsed xml-tree.
- All elements are read and instances for containers, components, events,
   types are created.
- The semidefined components in cntainers are replaced by the components in
   Parser.components.
- Type hierarchy is evaluated.
- Component dependencies resolved, i.a. description, id all actions and events of extended
   are inserted into the component, if not defined.
- semidefined events in components in containers are replaced by events from Parser.events


*/
