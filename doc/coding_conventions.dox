// coding: utf-8
// $Id$
/*!

\page coding_conventions Coding Conventions

On this page you find guidelines on how to write your code. The main reason
for this collection is to increase the readability and therefore reduce the
amount of errors.

\section general General Recommendations

- Any violation to the guide is allowed if it enhances readability. \n
  The main goal of this guidelines is to improve readability and thereby the 
  understanding and the maintainability and general quality of the code. It is 
  not possible to cover all the specific cases in a general guide.
- <b>Keep it simple!</b>\n
  Ease of understanding and use code is prefered about flexibility and
  complexity
- \b Devide \n
  Each class/methode has only one task.


\section documentation Documentation

- <b>Do it!</b>
- Documentation on how to use a class goes to the header file. Use
  doxygen style (http://www.doxygen.org) therefore. Documentation about the
  internal structure goes to the source file.
- Start writing the documentation before programming!\n
  Describe in a few sentences what the class should do. If you cannot describe
  the class well it maybe that the overall structure of the class is wrong.
- Documentation and code are connected. So if you change the code remember to
  update the documentation.
  Comments that contradict the code are worse than no comments.  Always make
  a priority of keeping the comments up-to-date when the code changes!


\section names Naming Conventions

- All names except namespaces and named constants must be CamelCase.
  - Classes and types start with uppercase, variables and functions
    with lowercase
  - Named constants (including defines and enumeration values) must be all
    uppercase using underscores to separate words.
  - Namespaces should be all lowercase with underscores.
- Use names that describe what a methode is doing. Use the following prefixes:
  - \b get/set for functions accessing class attributes
  - \b is for functions returning boolean values 
    (isEnabled(), isActive(), etc.)
- All names should in English using only ASCII characters. 
- Abbreviations in names should be avoided (do not write cmd instead of command)
- If you can not find a good name for a variable/methode it could be a 
  signal that the structure of your code is wrong


\section statements Statements

- Never use the 'using namespace'-statement in a header file.
- Type conversions must always be done explicitly. Never rely on implicit type 
  conversion.\n
  By this, the programmer indicates that he is aware of the different types 
  involved and that the mix is intentional.
\code
floatValue = static_cast<float>(intValue);	// NOT: floatValue = intValue;
\endcode
- Variables should be declared in the smallest scope possible.


\section files Files

- File extensions:
  - *.cpp for C++ sources
  - *.hpp for C++ header
  - *_impl.hpp for C++ template implementations
  - *.h for C header
  - *.c for C sources
- Use filename = classname
- When writting a template class put in implemenation in a file with
  the extension *_impl.hpp and include this file at the end of your
  template class.

\subsection layout Layout

- Limit all lines to a maximum of 79 characters.
- Use real TAB with width of 4 spaces (do not replace by spaces)
- Whitespaces and empty lines are for free, so use them to structure your code
  and align the commands.
- Always surround binary operators with a single space on either side:
  assignment (=), augmented assignment (+=, -= etc.),
  comparisons (==, <, >, !=, <>, <=, >=), etc.
- Use spaces around arithmetic operators

For everything else see the \ref example section.
  
\section optimization Optimization

Don't optimise on code level, only do it on structural level! Changing the code 
to reduce one or two if-statements has only little effect and increase the 
possibility to errors.

This is a list of expensive statements:
- open/closing files 
- cout (writing to the console or to a file)
- search / sort => use well aproved alogrim
- use the best fitting container (list, queue, map,..)
- alocation of memory (heap needs ~1000 times more time than the stack)


\section examples Examples

\subsection header Header file:
\include sample_header.hpp

\subsection source Source file:
\include sample_source.cpp

*/
