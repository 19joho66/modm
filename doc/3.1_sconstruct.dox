// coding: utf-8
// $Id$

/*!
\page sconstruct 3.1 SConstruct files: An introduction

The SConstruct files are the equivalent of Makefiles, they define the targets
that SCons will create during the build process.

\section introduction Introduction to SConstruct files

Every project using SCons must have a SConstruct file. This file directs the
operation of the build. The format of the SConstruct files should be very
familiar for Python users. This is no surprize, as Scons uses Python, the full
power of the Python programming language is at your disposal.

You can use everything that Python offers in the SConstruct files. Altough this
offers a lot of possiblies it mostly isn't needed.

For everyone unfamiliar with Python the most important things in short:

- Comments can be started with a pound(#) and continue until the end of the line.
- Indentation matters! Where you would use braces in languages like C or C++
  Python uses indentation. As a rule of thumb, don't use indentation in your
  SConstruct files unless you made yourself familiar with Python.
- Strings are enclosed in either double quotation marks("") or single
  quotation marks(''). Both forms are equal!

\subsection lists Lists

Many of the operations that are used in SCons require the use of lists. A list
is encapsulated with brackets('[]'). Each list item is followed by a comma,
inside these brackets. For example, this would be a list of numbers:
[4, 2, 1, 4]. Most of the time though, we will be using lists of strings:
["foo.cpp", "bar.cpp", "blub.c"]

For more information have a look at the python tutorial:
- <a href="http://docs.python.org/tutorial/">The offical Python tutorial</a>
- <a href="http://abop-german.berlios.de/">A Byte of Python - Online book (German)</a>

\section program Building a Simple Program

\subsection environment The Environment

In order to interact with SCons, the first thing done in an SConstruct file is
to create an Environment. Environments contain various information about the
system including compiler flags, linker flags, and so on.

\verbatim
env = Environment()
\endverbatim

This will create a default environment, trying to determine the default
settings for your system. If you want to write programs for the platform you're
currently programming on this will be fine, but to use XPCC we need to tell
SCons about it.

This is done by something called tools. Tools are packages that tell SCons
what to do with files, how they should be build, which program to invoke etc.

\verbatim
env = Environment(toolpath = ['path/to/xpcc/misc/scons'], tools = ['xpcc'])
\endverbatim

The tool for XPCC is called ... surprise: !xpcc. Because SCons don't know by
default where to find this tool we have to specifiy its toolpath, this is
path where SCons will look for a file called 'xpcc.py'. Make sure that this
path points to the /misc/scons subfolder of the XPCC project folder. 

A more detailed description can be found at the page about our
\ref scons_tools "SCons tools".

\subsection creating Creating a Program

The environment is not a simple variable. It is an object with various methods
or subroutines of it's own. The methods and subroutines allow the creation of
programs whether they are in Java, C++, or C. Let's create a 
simple C++ program. Once the environment is created, the program creation is simple:

\verbatim
env.Program(target = 'helloworld', source = ["main.cpp"])
\endverbatim

Here we introduce several new concepts. First, the target. A target in SCons
is similar to targets in make. The target is the logical result of the
operation. Here, the target is the program \c helloworld. Note that it is not
necessary to write \c helloworld.exe. The extension is chosen by SCons for you.
Targets are built from a list of sources. Here the list of sources contains
only one item: the C++ file "main.cpp". SCons will automatically pick a
compiler, and compile time flags to compile the source for you.

SCons understand and can build a vast array of source types:

- .c - a C source file
- .cpp/.c++/.C++/.cxx/.cc - a C++ source file
- .f/.for/.fpp - Fortran with optional C preprocessor in POSIX
- .S - an assembly file with optional C preprocessor in POSIX 

Other languages are available via special tools.

That was an introduction into the basics of SConstruct files. Let's go to the
\ref sconstruct_advanced "advanced topics" to show you want SCons can really do.
 */
