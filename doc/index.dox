// coding: utf-8
// 
// $Id$

/*!
@mainpage Cross Platform Component Communication
@image html xpcc_logo.png

This is a packet orientated communication library, enabling transparent
communication between components on PCs and Microcontrollers. It provides an
interface to communicate via CAN, TCP/IP or TIPC.

The primary part of the project is the \ref communication "Communication" module
that provides the interface to exchange messages between components.

To develop and use this module the need for a logger module accrued that is not
only able to write to the console but could also be used on microcontrollers.
So the \ref logger "Logger" module was created.

Also there is a lack of standard C++-librarys like the STL for small
microconrollers, so we created a reduced version adapted to the needs of
microcontrollers. The container are located in the section \ref data_structure.

\section about About the library

The main target of this library are small 8-bit AVR mircocontrollers, but it
should also be able to generate code for standard x86 PCs. This has partly historical
reasons but gives also a lot advantages. Especially testing and debugging is
much easier when you can run your Code native on your PC and don't have to
reprogram a microcontroller every time.
This technique has its limits of course, but for things like generic algorithms
it works very well.

An other advantage is that we can run nearly the same code on both sides when
the PC communicates with the microcontroller which reduces the efford for
developing the code.

While a PC has a lot of computational power it is somewhat limited on a
microcontroller. Therefore the most optimizations target the 8-bit
microcontrollers and accept possible sligthly worse code for the PC.

\subsection goals Optimizations goals

- Ease of use
- Speed
- Size

The main goal of nearly optimizations is speed and on second place
speed. Therefore this library is heavily template based. Templates offer the
possibly of generating nearly optimal code for various occasions with the
drawback of increased code size.
For our main target the AVRs this is acceptable because devices with big flash
memory are available. So, if you want the smallest possible code size this
isn't the right library for you, but if you wan't easy development with fast
execution you're welcome :)

\section build Building the library

The build system is described in detail on its own page: \ref build_system.

To get started go to the root folder an run \b scons \b update. Then go to the 
unittest folder and run \b scons. Now the library and all the unittests shoulb
be build.

If you're compiling for the pc just use \b scons \b run to build 
and run the unittests. You should get a output like:

@verbatim
Passed 437 tests
OK!
@endverbatim

Looks like everything is running just fine ;-)
 */
