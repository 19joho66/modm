#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2020, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


class ClockDummy(Module):
    def init(self, module):
        module.name = "clock.dummy"

    def prepare(self, module, options):
        module.depends(":architecture:clock")
        return True

    def build(self, env):
        env.outbasepath = "modm-test/src/modm-test/mock"
        env.copy("clock_dummy.hpp")
        env.copy("clock_dummy.cpp")

class ClockTesting(Module):
    def init(self, module):
        module.name = "clock.testing"

    def prepare(self, module, options):
        module.depends(":architecture:clock")
        return True

    def build(self, env):
        env.outbasepath = "modm-test/src/modm-test/mock"
        env.copy("testing_clock.hpp")
        env.copy("testing_clock.cpp")

class SpiDevice(Module):
    def init(self, module):
        module.name = "spi.device"

    def prepare(self, module, options):
        module.depends(":architecture:spi.device")
        return True

    def build(self, env):
        env.outbasepath = "modm-test/src/modm-test/mock"
        env.copy("spi_device.hpp")
        env.copy("spi_device.cpp")

class SpiMaster(Module):
    def init(self, module):
        module.name = "spi.master"

    def prepare(self, module, options):
        module.depends(":architecture:spi", ":container")
        return True

    def build(self, env):
        env.outbasepath = "modm-test/src/modm-test/mock"
        env.copy("spi_master.hpp")
        env.copy("spi_master.cpp")

class IoDevice(Module):
    def init(self, module):
        module.name = "io.device"

    def prepare(self, module, options):
        return True

    def build(self, env):
        env.outbasepath = "modm-test/src/modm-test/mock"
        env.copy("io_device.hpp")
        env.copy("io_device.cpp")


def init(module):
    module.name = ":mock"

def prepare(module, options):
    module.add_submodule(ClockDummy())
    module.add_submodule(ClockTesting())
    module.add_submodule(SpiDevice())
    module.add_submodule(SpiMaster())
    module.add_submodule(IoDevice())
    return True

def build(env):
    pass
